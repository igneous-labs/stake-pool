{"version":3,"file":"index.iife.min.js","sources":["../node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js","../node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js","../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js","../node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/_assert.js","../node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/crypto.js","../node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/utils.js","../node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/_md.js","../node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/_u64.js","../node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/sha512.js","../node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/utils.js","../node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/modular.js","../node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/curve.js","../node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/edwards.js","../node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/ed25519.js","../node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js","../node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js","../node_modules/.pnpm/base-x@3.0.10/node_modules/base-x/src/index.js","../node_modules/.pnpm/bs58@4.0.1/node_modules/bs58/index.js","../node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/sha256.js","../node_modules/.pnpm/text-encoding-utf-8@1.0.2/node_modules/text-encoding-utf-8/lib/encoding.lib.js","../node_modules/.pnpm/borsh@0.7.0/node_modules/borsh/lib/index.js","../node_modules/.pnpm/@solana+buffer-layout@4.0.1/node_modules/@solana/buffer-layout/lib/Layout.js","../node_modules/.pnpm/bigint-buffer@1.1.5/node_modules/bigint-buffer/dist/browser.js","../node_modules/.pnpm/superstruct@2.0.2/node_modules/superstruct/dist/index.mjs","../node_modules/.pnpm/@noble+hashes@1.7.1/node_modules/@noble/hashes/esm/hmac.js","../node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/abstract/weierstrass.js","../node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/_shortw_utils.js","../node_modules/.pnpm/@noble+curves@1.8.1/node_modules/@noble/curves/esm/secp256k1.js","../node_modules/.pnpm/@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@solana/web3.js/lib/index.browser.esm.js","../node_modules/.pnpm/@solana+spl-token@0.4.13_@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10__bae47fd1bdfd4dd8febbd00329de3b5e/node_modules/@solana/spl-token/lib/esm/constants.js","../node_modules/.pnpm/@solana+buffer-layout-utils@0.2.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@solana/buffer-layout-utils/lib/esm/base.mjs","../node_modules/.pnpm/@solana+buffer-layout-utils@0.2.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@solana/buffer-layout-utils/lib/esm/bigint.mjs","../node_modules/.pnpm/@solana+buffer-layout-utils@0.2.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@solana/buffer-layout-utils/lib/esm/native.mjs","../node_modules/.pnpm/@solana+buffer-layout-utils@0.2.0_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@solana/buffer-layout-utils/lib/esm/web3.mjs","../node_modules/.pnpm/@solana+spl-token@0.4.13_@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10__bae47fd1bdfd4dd8febbd00329de3b5e/node_modules/@solana/spl-token/lib/esm/errors.js","../node_modules/.pnpm/@solana+spl-token@0.4.13_@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10__bae47fd1bdfd4dd8febbd00329de3b5e/node_modules/@solana/spl-token/lib/esm/instructions/types.js","../node_modules/.pnpm/@solana+spl-token@0.4.13_@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10__bae47fd1bdfd4dd8febbd00329de3b5e/node_modules/@solana/spl-token/lib/esm/extensions/accountType.js","../node_modules/.pnpm/@solana+spl-token@0.4.13_@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10__bae47fd1bdfd4dd8febbd00329de3b5e/node_modules/@solana/spl-token/lib/esm/state/multisig.js","../node_modules/.pnpm/@solana+spl-token@0.4.13_@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10__bae47fd1bdfd4dd8febbd00329de3b5e/node_modules/@solana/spl-token/lib/esm/state/account.js","../node_modules/.pnpm/@solana+spl-token@0.4.13_@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10__bae47fd1bdfd4dd8febbd00329de3b5e/node_modules/@solana/spl-token/lib/esm/instructions/internal.js","../node_modules/.pnpm/@solana+spl-token@0.4.13_@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10__bae47fd1bdfd4dd8febbd00329de3b5e/node_modules/@solana/spl-token/lib/esm/state/mint.js","../node_modules/.pnpm/@solana+spl-token@0.4.13_@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10__bae47fd1bdfd4dd8febbd00329de3b5e/node_modules/@solana/spl-token/lib/esm/instructions/approve.js","../node_modules/.pnpm/@solana+spl-token@0.4.13_@solana+web3.js@1.98.0_bufferutil@4.0.9_utf-8-validate@5.0.10__bae47fd1bdfd4dd8febbd00329de3b5e/node_modules/@solana/spl-token/lib/esm/instructions/associatedTokenAccount.js","../src/utils/math.ts","../src/constants.ts","../src/utils/program-address.ts","../node_modules/.pnpm/buffer-layout@1.2.2/node_modules/buffer-layout/lib/Layout.js","../src/codecs.ts","../src/layouts.ts","../src/utils/stake.ts","../src/utils/instruction.ts","../src/utils/index.ts","../src/instructions.ts","../src/index.ts"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","/**\n * Internal assertion helpers.\n * @module\n */\n/** Asserts something is positive integer. */\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Is number an Uint8Array? Copied from utils for perf. */\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\nexport { anumber, abytes, ahash, aexists, aoutput };\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n// Cast array to different type\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n// Cast array to view\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('utf8ToBytes expected string, got ' + typeof str);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { aexists, aoutput } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n */\nimport { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\n/** SHA2-512 hash function. */\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\n/** SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\n/** SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks. */\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\n/** SHA2-384 hash function. */\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (modulo <= _0n)\n        throw new Error('invalid modulus');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n        // Crash instead of infinity loop, we cannot reasonable count until P.\n        if (Z > 1000)\n            throw new Error('Cannot find square root: likely non-prime P');\n    }\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order) {\n    const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n    return (f, x) => f.pow(x, legendreConst);\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendre = FpLegendre(f.ORDER);\n    return (x) => {\n        const p = legendre(f, x);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { nLength, validateField } from './modular.js';\nimport { bitLen, validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, bits) {\n    validateW(W, bits);\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = calcWOpts(W, bits);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                if (n === _0n)\n                    break; // No need to go over empty scalar\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                if (wbits === 0)\n                    continue;\n                let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n                if (wbits < 0)\n                    curr = curr.negate();\n                // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n                acc = acc.add(curr);\n            }\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    if (points.length !== scalars.length)\n        throw new Error('arrays of points and scalars must have equal length');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(points.length));\n    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n    const MASK = (1 << windowSize) - 1;\n    const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < scalars.length; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = BigInt((1 << windowSize) - 1);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/**\n * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n * For design rationale of types / exports, see weierstrass module documentation.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { pippenger, validateBasic, wNAF, } from './curve.js';\nimport { Field, mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, memoized } from './utils.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n/**\n * Creates Twisted Edwards curve with EdDSA signatures.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h\n * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })\n */\nexport function twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    // Important:\n    // There are some places where Fp.BYTES is used instead of nByteLength.\n    // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n    // TODO: test and find curves which behave otherwise.\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            abool('phflag', phflag);\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    // 0 <= n < MASK\n    // Coordinates larger than Fp.ORDER are allowed for zip215\n    function aCoordinate(title, n) {\n        ut.aInRange('coordinate ' + title, n, _0n, MASK);\n    }\n    function assertPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    const toAffineMemo = memoized((p, iz) => {\n        const { ex: x, ey: y, ez: z } = p;\n        const is0 = p.is0();\n        if (iz == null)\n            iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n        const ax = modP(x * iz);\n        const ay = modP(y * iz);\n        const zz = modP(z * iz);\n        if (is0)\n            return { x: _0n, y: _1n };\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    const assertValidMemo = memoized((p) => {\n        const { a, d } = CURVE;\n        if (p.is0())\n            throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n        // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n        // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n        const { ex: X, ey: Y, ez: Z, et: T } = p;\n        const X2 = modP(X * X); // X²\n        const Y2 = modP(Y * Y); // Y²\n        const Z2 = modP(Z * Z); // Z²\n        const Z4 = modP(Z2 * Z2); // Z⁴\n        const aX2 = modP(X2 * a); // aX²\n        const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n        const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n        if (left !== right)\n            throw new Error('bad point: equation left != right (1)');\n        // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n        const XY = modP(X * Y);\n        const ZT = modP(Z * T);\n        if (XY !== ZT)\n            throw new Error('bad point: equation left != right (2)');\n        return true;\n    });\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            aCoordinate('x', ex);\n            aCoordinate('y', ey);\n            aCoordinate('z', ez);\n            aCoordinate('t', et);\n            Object.freeze(this);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            aCoordinate('x', x);\n            aCoordinate('y', y);\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        // Compare one point to another.\n        equals(other) {\n            assertPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            assertPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const n = scalar;\n            ut.aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n            const { p, f } = this.wNAF(n);\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n        multiplyUnsafe(scalar, acc = Point.ZERO) {\n            const n = scalar;\n            ut.aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n            if (n === _0n)\n                return I;\n            if (this.is0() || n === _1n)\n                return this;\n            return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            abool('zip215', zip215);\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = ut.bytesToNumberLE(normed);\n            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n            // RFC8032 prohibits >= p, but ZIP215 doesn't\n            // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n            // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n            const max = zip215 ? MASK : Fp.ORDER;\n            ut.aInRange('pointHex.y', y, _0n, max);\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = wNAF(Point, nByteLength * 8);\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(ut.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = Fp.BYTES;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = ut.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        ut.aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n        const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n        return ensureBytes('result', res, Fp.BYTES * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    /**\n     * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n     * An extended group equation is checked.\n     */\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        publicKey = ensureBytes('publicKey', publicKey, len);\n        if (zip215 !== undefined)\n            abool('zip215', zip215);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n        let A, R, SB;\n        try {\n            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n            // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n            // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // Extended group equation\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map","/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { pippenger } from './abstract/curve.js';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { createHasher, expand_message_xmd, } from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from './abstract/utils.js';\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\nfunction ed25519_pow_2_252_3(x) {\n    // prettier-ignore\n    const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n    const b10 = (pow2(b5, _5n, P) * b5) % P;\n    const b20 = (pow2(b10, _10n, P) * b10) % P;\n    const b40 = (pow2(b20, _20n, P) * b20) % P;\n    const b80 = (pow2(b40, _40n, P) * b40) % P;\n    const b160 = (pow2(b80, _80n, P) * b80) % P;\n    const b240 = (pow2(b160, _80n, P) * b80) % P;\n    const b250 = (pow2(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = mod(v * v * v, P); // v³\n    const v7 = mod(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if (isNegativeLE(x, P))\n        x = mod(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();\nconst ed25519Defaults = /* @__PURE__ */ (() => ({\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: _8n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n}))();\n/**\n * ed25519 curve with EdDSA signatures.\n * @example\n * import { ed25519 } from '@noble/curves/ed25519';\n * const priv = ed25519.utils.randomPrivateKey();\n * const pub = ed25519.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = ed25519.sign(msg, priv);\n * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n */\nexport const ed25519 = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */ (() => twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n}))();\nexport const ed25519ph = /* @__PURE__ */ (() => twistedEdwards(Object.assign({}, ed25519Defaults, {\n    domain: ed25519_domain,\n    prehash: sha512,\n})))();\n/**\n * ECDH using curve25519 aka x25519.\n * @example\n * import { x25519 } from '@noble/curves/ed25519';\n * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n * x25519.getPublicKey(x25519.utils.randomPrivateKey());\n */\nexport const x25519 = /* @__PURE__ */ (() => montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n    const ELL2_J = BigInt(486662);\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = /* @__PURE__ */ BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!isNegativeLE(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if (isNegativeLE(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || isNegativeLE(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    static msm(points, scalars) {\n        const Fn = Field(ed25519.CURVE.n, ed25519.CURVE.nBitLength);\n        return pippenger(RistPoint, Fn, points, scalars);\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if (isNegativeLE(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if (isNegativeLE(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 32); // 11\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/** SHA2-256 hash function */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n    constructor(failure, failures) {\n        let cached;\n        const { message, explanation, ...rest } = failure;\n        const { path } = failure;\n        const msg = path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`;\n        super(explanation ?? msg);\n        if (explanation != null)\n            this.cause = msg;\n        Object.assign(this, rest);\n        this.name = this.constructor.name;\n        this.failures = () => {\n            return (cached ?? (cached = [failure, ...failures()]));\n        };\n    }\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n    return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isObject(x) {\n    return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a non-array object.\n */\nfunction isNonArrayObject(x) {\n    return isObject(x) && !Array.isArray(x);\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isPlainObject(x) {\n    if (Object.prototype.toString.call(x) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(x);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\nfunction print(value) {\n    if (typeof value === 'symbol') {\n        return value.toString();\n    }\n    return typeof value === 'string' ? JSON.stringify(value) : `${value}`;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\nfunction shiftIterator(input) {\n    const { done, value } = input.next();\n    return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\nfunction toFailure(result, context, struct, value) {\n    if (result === true) {\n        return;\n    }\n    else if (result === false) {\n        result = {};\n    }\n    else if (typeof result === 'string') {\n        result = { message: result };\n    }\n    const { path, branch } = context;\n    const { type } = struct;\n    const { refinement, message = `Expected a value of type \\`${type}\\`${refinement ? ` with refinement \\`${refinement}\\`` : ''}, but received: \\`${print(value)}\\``, } = result;\n    return {\n        value,\n        type,\n        refinement,\n        key: path[path.length - 1],\n        path,\n        branch,\n        ...result,\n        message,\n    };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\nfunction* toFailures(result, context, struct, value) {\n    if (!isIterable(result)) {\n        result = [result];\n    }\n    for (const r of result) {\n        const failure = toFailure(r, context, struct, value);\n        if (failure) {\n            yield failure;\n        }\n    }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\nfunction* run(value, struct, options = {}) {\n    const { path = [], branch = [value], coerce = false, mask = false } = options;\n    const ctx = { path, branch, mask };\n    if (coerce) {\n        value = struct.coercer(value, ctx);\n    }\n    let status = 'valid';\n    for (const failure of struct.validator(value, ctx)) {\n        failure.explanation = options.message;\n        status = 'not_valid';\n        yield [failure, undefined];\n    }\n    for (let [k, v, s] of struct.entries(value, ctx)) {\n        const ts = run(v, s, {\n            path: k === undefined ? path : [...path, k],\n            branch: k === undefined ? branch : [...branch, v],\n            coerce,\n            mask,\n            message: options.message,\n        });\n        for (const t of ts) {\n            if (t[0]) {\n                status = t[0].refinement != null ? 'not_refined' : 'not_valid';\n                yield [t[0], undefined];\n            }\n            else if (coerce) {\n                v = t[1];\n                if (k === undefined) {\n                    value = v;\n                }\n                else if (value instanceof Map) {\n                    value.set(k, v);\n                }\n                else if (value instanceof Set) {\n                    value.add(v);\n                }\n                else if (isObject(value)) {\n                    if (v !== undefined || k in value)\n                        value[k] = v;\n                }\n            }\n        }\n    }\n    if (status !== 'not_valid') {\n        for (const failure of struct.refiner(value, ctx)) {\n            failure.explanation = options.message;\n            status = 'not_refined';\n            yield [failure, undefined];\n        }\n    }\n    if (status === 'valid') {\n        yield [undefined, value];\n    }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\nclass Struct {\n    constructor(props) {\n        const { type, schema, validator, refiner, coercer = (value) => value, entries = function* () { }, } = props;\n        this.type = type;\n        this.schema = schema;\n        this.entries = entries;\n        this.coercer = coercer;\n        if (validator) {\n            this.validator = (value, context) => {\n                const result = validator(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.validator = () => [];\n        }\n        if (refiner) {\n            this.refiner = (value, context) => {\n                const result = refiner(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.refiner = () => [];\n        }\n    }\n    /**\n     * Assert that a value passes the struct's validation, throwing if it doesn't.\n     */\n    assert(value, message) {\n        return assert(value, this, message);\n    }\n    /**\n     * Create a value with the struct's coercion logic, then validate it.\n     */\n    create(value, message) {\n        return create(value, this, message);\n    }\n    /**\n     * Check if a value passes the struct's validation.\n     */\n    is(value) {\n        return is(value, this);\n    }\n    /**\n     * Mask a value, coercing and validating it, but returning only the subset of\n     * properties defined by the struct's schema. Masking applies recursively to\n     * props of `object` structs only.\n     */\n    mask(value, message) {\n        return mask(value, this, message);\n    }\n    /**\n     * Validate a value with the struct's validation logic, returning a tuple\n     * representing the result.\n     *\n     * You may optionally pass `true` for the `coerce` argument to coerce\n     * the value before attempting to validate it. If you do, the result will\n     * contain the coerced result when successful. Also, `mask` will turn on\n     * masking of the unknown `object` props recursively if passed.\n     */\n    validate(value, options = {}) {\n        return validate(value, this, options);\n    }\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\nfunction assert(value, struct, message) {\n    const result = validate(value, struct, { message });\n    if (result[0]) {\n        throw result[0];\n    }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\nfunction create(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\nfunction mask(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, mask: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Check if a value passes a struct.\n */\nfunction is(value, struct) {\n    const result = validate(value, struct);\n    return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\nfunction validate(value, struct, options = {}) {\n    const tuples = run(value, struct, options);\n    const tuple = shiftIterator(tuples);\n    if (tuple[0]) {\n        const error = new StructError(tuple[0], function* () {\n            for (const t of tuples) {\n                if (t[0]) {\n                    yield t[0];\n                }\n            }\n        });\n        return [error, undefined];\n    }\n    else {\n        const v = tuple[1];\n        return [undefined, v];\n    }\n}\n\nfunction assign(...Structs) {\n    const isType = Structs[0].type === 'type';\n    const schemas = Structs.map((s) => s.schema);\n    const schema = Object.assign({}, ...schemas);\n    return isType ? type(schema) : object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\nfunction define(name, validator) {\n    return new Struct({ type: name, schema: null, validator });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\nfunction deprecated(struct, log) {\n    return new Struct({\n        ...struct,\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n        validator(value, ctx) {\n            if (value === undefined) {\n                return true;\n            }\n            else {\n                log(value, ctx);\n                return struct.validator(value, ctx);\n            }\n        },\n    });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\nfunction dynamic(fn) {\n    return new Struct({\n        type: 'dynamic',\n        schema: null,\n        *entries(value, ctx) {\n            const struct = fn(value, ctx);\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\nfunction lazy(fn) {\n    let struct;\n    return new Struct({\n        type: 'lazy',\n        schema: null,\n        *entries(value, ctx) {\n            struct ?? (struct = fn());\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\nfunction omit(struct, keys) {\n    const { schema } = struct;\n    const subschema = { ...schema };\n    for (const key of keys) {\n        delete subschema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\nfunction partial(struct) {\n    const isStruct = struct instanceof Struct;\n    const schema = isStruct ? { ...struct.schema } : { ...struct };\n    for (const key in schema) {\n        schema[key] = optional(schema[key]);\n    }\n    if (isStruct && struct.type === 'type') {\n        return type(schema);\n    }\n    return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\nfunction pick(struct, keys) {\n    const { schema } = struct;\n    const subschema = {};\n    for (const key of keys) {\n        subschema[key] = schema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\nfunction struct(name, validator) {\n    console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n    return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\nfunction any() {\n    return define('any', () => true);\n}\nfunction array(Element) {\n    return new Struct({\n        type: 'array',\n        schema: Element,\n        *entries(value) {\n            if (Element && Array.isArray(value)) {\n                for (const [i, v] of value.entries()) {\n                    yield [i, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array value, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a bigint.\n */\nfunction bigint() {\n    return define('bigint', (value) => {\n        return typeof value === 'bigint';\n    });\n}\n/**\n * Ensure that a value is a boolean.\n */\nfunction boolean() {\n    return define('boolean', (value) => {\n        return typeof value === 'boolean';\n    });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\nfunction date() {\n    return define('date', (value) => {\n        return ((value instanceof Date && !isNaN(value.getTime())) ||\n            `Expected a valid \\`Date\\` object, but received: ${print(value)}`);\n    });\n}\nfunction enums(values) {\n    const schema = {};\n    const description = values.map((v) => print(v)).join();\n    for (const key of values) {\n        schema[key] = key;\n    }\n    return new Struct({\n        type: 'enums',\n        schema,\n        validator(value) {\n            return (values.includes(value) ||\n                `Expected one of \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a function.\n */\nfunction func() {\n    return define('func', (value) => {\n        return (typeof value === 'function' ||\n            `Expected a function, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\nfunction instance(Class) {\n    return define('instance', (value) => {\n        return (value instanceof Class ||\n            `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an integer.\n */\nfunction integer() {\n    return define('integer', (value) => {\n        return ((typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n            `Expected an integer, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value matches all of a set of types.\n */\nfunction intersection(Structs) {\n    return new Struct({\n        type: 'intersection',\n        schema: null,\n        *entries(value, ctx) {\n            for (const S of Structs) {\n                yield* S.entries(value, ctx);\n            }\n        },\n        *validator(value, ctx) {\n            for (const S of Structs) {\n                yield* S.validator(value, ctx);\n            }\n        },\n        *refiner(value, ctx) {\n            for (const S of Structs) {\n                yield* S.refiner(value, ctx);\n            }\n        },\n    });\n}\nfunction literal(constant) {\n    const description = print(constant);\n    const t = typeof constant;\n    return new Struct({\n        type: 'literal',\n        schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n        validator(value) {\n            return (value === constant ||\n                `Expected the literal \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\nfunction map(Key, Value) {\n    return new Struct({\n        type: 'map',\n        schema: null,\n        *entries(value) {\n            if (Key && Value && value instanceof Map) {\n                for (const [k, v] of value.entries()) {\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Map ? new Map(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Map ||\n                `Expected a \\`Map\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that no value ever passes validation.\n */\nfunction never() {\n    return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\nfunction nullable(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === null || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is a number.\n */\nfunction number() {\n    return define('number', (value) => {\n        return ((typeof value === 'number' && !isNaN(value)) ||\n            `Expected a number, but received: ${print(value)}`);\n    });\n}\nfunction object(schema) {\n    const knowns = schema ? Object.keys(schema) : [];\n    const Never = never();\n    return new Struct({\n        type: 'object',\n        schema: schema ? schema : null,\n        *entries(value) {\n            if (schema && isObject(value)) {\n                const unknowns = new Set(Object.keys(value));\n                for (const key of knowns) {\n                    unknowns.delete(key);\n                    yield [key, value[key], schema[key]];\n                }\n                for (const key of unknowns) {\n                    yield [key, value[key], Never];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value, ctx) {\n            if (!isNonArrayObject(value)) {\n                return value;\n            }\n            const coerced = { ...value };\n            // The `object` struct has special behaviour enabled by the mask flag.\n            // When masking, properties that are not in the schema are deleted from\n            // the coerced object instead of eventually failing validaiton.\n            if (ctx.mask && schema) {\n                for (const key in coerced) {\n                    if (schema[key] === undefined) {\n                        delete coerced[key];\n                    }\n                }\n            }\n            return coerced;\n        },\n    });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\nfunction optional(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\nfunction record(Key, Value) {\n    return new Struct({\n        type: 'record',\n        schema: null,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k in value) {\n                    const v = value[k];\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isNonArrayObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\nfunction regexp() {\n    return define('regexp', (value) => {\n        return value instanceof RegExp;\n    });\n}\nfunction set(Element) {\n    return new Struct({\n        type: 'set',\n        schema: null,\n        *entries(value) {\n            if (Element && value instanceof Set) {\n                for (const v of value) {\n                    yield [v, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Set ? new Set(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Set ||\n                `Expected a \\`Set\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a string.\n */\nfunction string() {\n    return define('string', (value) => {\n        return (typeof value === 'string' ||\n            `Expected a string, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\nfunction tuple(Structs) {\n    const Never = never();\n    return new Struct({\n        type: 'tuple',\n        schema: null,\n        *entries(value) {\n            if (Array.isArray(value)) {\n                const length = Math.max(Structs.length, value.length);\n                for (let i = 0; i < length; i++) {\n                    yield [i, value[i], Structs[i] || Never];\n                }\n            }\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n    });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\nfunction type(schema) {\n    const keys = Object.keys(schema);\n    return new Struct({\n        type: 'type',\n        schema,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k of keys) {\n                    yield [k, value[k], schema[k]];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isNonArrayObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value matches one of a set of types.\n */\nfunction union(Structs) {\n    const description = Structs.map((s) => s.type).join(' | ');\n    return new Struct({\n        type: 'union',\n        schema: null,\n        coercer(value, ctx) {\n            for (const S of Structs) {\n                const [error, coerced] = S.validate(value, {\n                    coerce: true,\n                    mask: ctx.mask,\n                });\n                if (!error) {\n                    return coerced;\n                }\n            }\n            return value;\n        },\n        validator(value, ctx) {\n            const failures = [];\n            for (const S of Structs) {\n                const [...tuples] = run(value, S, ctx);\n                const [first] = tuples;\n                if (!first[0]) {\n                    return [];\n                }\n                else {\n                    for (const [failure] of tuples) {\n                        if (failure) {\n                            failures.push(failure);\n                        }\n                    }\n                }\n            }\n            return [\n                `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(value)}`,\n                ...failures,\n            ];\n        },\n    });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\nfunction unknown() {\n    return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction coerce(struct, condition, coercer) {\n    return new Struct({\n        ...struct,\n        coercer: (value, ctx) => {\n            return is(value, condition)\n                ? struct.coercer(coercer(value, ctx), ctx)\n                : struct.coercer(value, ctx);\n        },\n    });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction defaulted(struct, fallback, options = {}) {\n    return coerce(struct, unknown(), (x) => {\n        const f = typeof fallback === 'function' ? fallback() : fallback;\n        if (x === undefined) {\n            return f;\n        }\n        if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n            const ret = { ...x };\n            let changed = false;\n            for (const key in f) {\n                if (ret[key] === undefined) {\n                    ret[key] = f[key];\n                    changed = true;\n                }\n            }\n            if (changed) {\n                return ret;\n            }\n        }\n        return x;\n    });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction trimmed(struct) {\n    return coerce(struct, string(), (x) => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\nfunction empty(struct) {\n    return refine(struct, 'empty', (value) => {\n        const size = getSize(value);\n        return (size === 0 ||\n            `Expected an empty ${struct.type} but received one with a size of \\`${size}\\``);\n    });\n}\nfunction getSize(value) {\n    if (value instanceof Map || value instanceof Set) {\n        return value.size;\n    }\n    else {\n        return value.length;\n    }\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\nfunction max(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'max', (value) => {\n        return exclusive\n            ? value < threshold\n            : value <= threshold ||\n                `Expected a ${struct.type} less than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\nfunction min(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'min', (value) => {\n        return exclusive\n            ? value > threshold\n            : value >= threshold ||\n                `Expected a ${struct.type} greater than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a string, array, map or set is not empty.\n */\nfunction nonempty(struct) {\n    return refine(struct, 'nonempty', (value) => {\n        const size = getSize(value);\n        return (size > 0 || `Expected a nonempty ${struct.type} but received an empty one`);\n    });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\nfunction pattern(struct, regexp) {\n    return refine(struct, 'pattern', (value) => {\n        return (regexp.test(value) ||\n            `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`);\n    });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\nfunction size(struct, min, max = min) {\n    const expected = `Expected a ${struct.type}`;\n    const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``;\n    return refine(struct, 'size', (value) => {\n        if (typeof value === 'number' || value instanceof Date) {\n            return ((min <= value && value <= max) ||\n                `${expected} ${of} but received \\`${value}\\``);\n        }\n        else if (value instanceof Map || value instanceof Set) {\n            const { size } = value;\n            return ((min <= size && size <= max) ||\n                `${expected} with a size ${of} but received one with a size of \\`${size}\\``);\n        }\n        else {\n            const { length } = value;\n            return ((min <= length && length <= max) ||\n                `${expected} with a length ${of} but received one with a length of \\`${length}\\``);\n        }\n    });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\nfunction refine(struct, name, refiner) {\n    return new Struct({\n        ...struct,\n        *refiner(value, ctx) {\n            yield* struct.refiner(value, ctx);\n            const result = refiner(value, ctx);\n            const failures = toFailures(result, ctx, struct, value);\n            for (const failure of failures) {\n                yield { ...failure, refinement: name };\n            }\n        },\n    });\n}\n\nexport { Struct, StructError, any, array, assert, assign, bigint, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nonempty, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };\n//# sourceMappingURL=index.mjs.map\n","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { pippenger, validateBasic, wNAF, } from './curve.js';\nimport { Field, getMinHashLength, invert, mapHashToField, mod, validateField, } from './modular.js';\nimport * as ut from './utils.js';\nimport { abool, ensureBytes, memoized } from './utils.js';\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = ut.numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = ut.numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = ut.numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return b2n(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return ut.inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('invalid private key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n        }\n        if (wrapPrivateKey)\n            num = mod(num, N); // disabled by default, enabled for BLS\n        ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (this.is0() || sc === _1n)\n                return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this))\n                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!ut.inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n            ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = getMinHashLength(CURVE.n);\n            return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\"\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && format !== 'compact' && format !== 'der')\n            throw new Error('format must be compact or der');\n        const isHex = typeof sg === 'string' || ut.isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj)\n                _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map","/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from './abstract/utils.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n *\n * @example\n * import { secp256k1 } from '@noble/curves/secp256k1';\n *\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n */\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7),\n    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\n/** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\n/** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","import { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { CommonClient, WebSocket } from 'rpc-websockets';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\nvar _PublicKey;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [Symbol.toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_PublicKey = PublicKey;\nPublicKey.default = new _PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\nclass SendTransactionError extends Error {\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs\n  }) {\n    const maybeLogsOutput = logs ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. ` : '';\n    const guideText = '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message;\n    switch (action) {\n      case 'send':\n        message = `Transaction ${signature} resulted in an error. \\n` + `${transactionMessage}. ` + maybeLogsOutput + guideText;\n        break;\n      case 'simulate':\n        message = `Simulation failed. \\nMessage: ${transactionMessage}. \\n` + maybeLogsOutput + guideText;\n        break;\n      default:\n        {\n          message = `Unknown action '${(a => a)(action)}'`;\n        }\n    }\n    super(message);\n    this.signature = void 0;\n    this.transactionMessage = void 0;\n    this.transactionLogs = void 0;\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n  get transactionError() {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : undefined\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs() {\n    const cachedLogs = this.transactionLogs;\n    if (cachedLogs != null && typeof cachedLogs === 'object' && 'then' in cachedLogs) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n  async getLogs(connection) {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection.getTransaction(this.signature).then(tx => {\n          if (tx && tx.meta && tx.meta.logMessages) {\n            const logs = tx.meta.logMessages;\n            this.transactionLogs = logs;\n            resolve(logs);\n          } else {\n            reject(new Error('Log messages not found'));\n          }\n        }).catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar fastStableStringify$1;\nvar hasRequiredFastStableStringify;\n\nfunction requireFastStableStringify () {\n\tif (hasRequiredFastStableStringify) return fastStableStringify$1;\n\thasRequiredFastStableStringify = 1;\n\tvar objToString = Object.prototype.toString;\n\tvar objKeys = Object.keys || function(obj) {\n\t\t\tvar keys = [];\n\t\t\tfor (var name in obj) {\n\t\t\t\tkeys.push(name);\n\t\t\t}\n\t\t\treturn keys;\n\t\t};\n\n\tfunction stringify(val, isArrayProp) {\n\t\tvar i, max, str, keys, key, propVal, toStr;\n\t\tif (val === true) {\n\t\t\treturn \"true\";\n\t\t}\n\t\tif (val === false) {\n\t\t\treturn \"false\";\n\t\t}\n\t\tswitch (typeof val) {\n\t\t\tcase \"object\":\n\t\t\t\tif (val === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t\t} else {\n\t\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\t\tstr = '[';\n\t\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + ']';\n\t\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t\t// only object is left\n\t\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\t\tmax = keys.length;\n\t\t\t\t\t\tstr = \"\";\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase \"function\":\n\t\t\tcase \"undefined\":\n\t\t\t\treturn isArrayProp ? null : undefined;\n\t\t\tcase \"string\":\n\t\t\t\treturn JSON.stringify(val);\n\t\t\tdefault:\n\t\t\t\treturn isFinite(val) ? val : null;\n\t\t}\n\t}\n\n\tfastStableStringify$1 = function(val) {\n\t\tvar returnVal = stringify(val, false);\n\t\tif (returnVal !== undefined) {\n\t\t\treturn ''+ returnVal;\n\t\t}\n\t};\n\treturn fastStableStringify$1;\n}\n\nvar fastStableStringifyExports = /*@__PURE__*/ requireFastStableStringify();\nvar fastStableStringify = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringifyExports);\n\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n\nvar fetchImpl = globalThis.fetch;\n\nclass RpcWebSocketClient extends CommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = WebSocket(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to agave-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(filters) {\n  return filters.map(filter => 'memcmp' in filter ? {\n    ...filter,\n    memcmp: {\n      ...filter.memcmp,\n      encoding: filter.memcmp.encoding ?? 'base58'\n    }\n  } : filter);\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst ParsedInstructionStruct = type({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown()\n});\nconst PartiallyDecodedInstructionStruct = type({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string()\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  }))),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(union([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))\n  }))))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"1.0.0-maintenance\"}`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', {\n      ...configWithoutEncoding,\n      ...(configWithoutEncoding.filters ? {\n        filters: applyDefaultMemcmpEncodingToFilters(configWithoutEncoding.filters)\n      } : null)\n    });\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const {\n      context,\n      value: {\n        blockhash\n      }\n    } = await this.getLatestBlockhashAndContext(commitment);\n    const feeCalculator = {\n      get lamportsPerSignature() {\n        throw new Error('The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' + 'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' + 'for a given message.');\n      },\n      toJSON() {\n        return {};\n      }\n    };\n    return {\n      context,\n      value: {\n        blockhash,\n        feeCalculator\n      }\n    };\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              console.error(`Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``, {\n                args,\n                error: e\n              });\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(publicKey, callback, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64', config);\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(programId, callback, commitmentOrConfig, maybeFilters) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, config ? config : maybeFilters ? {\n      filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nvar _Lockup;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_Lockup = Lockup;\nLockup.default = new _Lockup(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n//# sourceMappingURL=index.browser.esm.js.map\n","import { PublicKey } from '@solana/web3.js';\n/** Address of the SPL Token program */\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');\n/** Check that the token program provided is not `Tokenkeg...`, useful when using extensions */\nexport function programSupportsExtensions(programId) {\n    if (programId.equals(TOKEN_PROGRAM_ID)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n//# sourceMappingURL=constants.js.map","export const encodeDecode = (layout) => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n//# sourceMappingURL=base.js.map","import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferLE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const bigIntBE = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntBE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferBE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);\n//# sourceMappingURL=bigint.js.map","import { u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base.mjs';\nexport const bool = (property) => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n    const boolLayout = layout;\n    boolLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n    boolLayout.encode = (bool, buffer, offset) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n    return boolLayout;\n};\n//# sourceMappingURL=native.js.map","import { blob } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base.mjs';\nexport const publicKey = (property) => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n    const publicKeyLayout = layout;\n    publicKeyLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n    publicKeyLayout.encode = (publicKey, buffer, offset) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n    return publicKeyLayout;\n};\n//# sourceMappingURL=web3.js.map","/** Base class for errors */\nexport class TokenError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenAccountNotFoundError';\n    }\n}\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountError';\n    }\n}\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountDataError';\n    }\n}\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountOwnerError';\n    }\n}\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountSizeError';\n    }\n}\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidMintError';\n    }\n}\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidOwnerError';\n    }\n}\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenOwnerOffCurveError';\n    }\n}\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionProgramError';\n    }\n}\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionKeysError';\n    }\n}\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionDataError';\n    }\n}\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionTypeError';\n    }\n}\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenUnsupportedInstructionError';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountNotFound';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookInvalidSeed';\n    }\n}\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountDataNotFound';\n    }\n}\n/** Thrown if pubkey data extra accounts config is invalid */\nexport class TokenTransferHookInvalidPubkeyData extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookInvalidPubkeyData';\n    }\n}\n/** Thrown if pubkey data source is too small for a pubkey */\nexport class TokenTransferHookPubkeyDataTooSmall extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookPubkeyDataTooSmall';\n    }\n}\n//# sourceMappingURL=errors.js.map","/** Instructions defined by the program */\nexport var TokenInstruction;\n(function (TokenInstruction) {\n    TokenInstruction[TokenInstruction[\"InitializeMint\"] = 0] = \"InitializeMint\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount\"] = 1] = \"InitializeAccount\";\n    TokenInstruction[TokenInstruction[\"InitializeMultisig\"] = 2] = \"InitializeMultisig\";\n    TokenInstruction[TokenInstruction[\"Transfer\"] = 3] = \"Transfer\";\n    TokenInstruction[TokenInstruction[\"Approve\"] = 4] = \"Approve\";\n    TokenInstruction[TokenInstruction[\"Revoke\"] = 5] = \"Revoke\";\n    TokenInstruction[TokenInstruction[\"SetAuthority\"] = 6] = \"SetAuthority\";\n    TokenInstruction[TokenInstruction[\"MintTo\"] = 7] = \"MintTo\";\n    TokenInstruction[TokenInstruction[\"Burn\"] = 8] = \"Burn\";\n    TokenInstruction[TokenInstruction[\"CloseAccount\"] = 9] = \"CloseAccount\";\n    TokenInstruction[TokenInstruction[\"FreezeAccount\"] = 10] = \"FreezeAccount\";\n    TokenInstruction[TokenInstruction[\"ThawAccount\"] = 11] = \"ThawAccount\";\n    TokenInstruction[TokenInstruction[\"TransferChecked\"] = 12] = \"TransferChecked\";\n    TokenInstruction[TokenInstruction[\"ApproveChecked\"] = 13] = \"ApproveChecked\";\n    TokenInstruction[TokenInstruction[\"MintToChecked\"] = 14] = \"MintToChecked\";\n    TokenInstruction[TokenInstruction[\"BurnChecked\"] = 15] = \"BurnChecked\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount2\"] = 16] = \"InitializeAccount2\";\n    TokenInstruction[TokenInstruction[\"SyncNative\"] = 17] = \"SyncNative\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount3\"] = 18] = \"InitializeAccount3\";\n    TokenInstruction[TokenInstruction[\"InitializeMultisig2\"] = 19] = \"InitializeMultisig2\";\n    TokenInstruction[TokenInstruction[\"InitializeMint2\"] = 20] = \"InitializeMint2\";\n    TokenInstruction[TokenInstruction[\"GetAccountDataSize\"] = 21] = \"GetAccountDataSize\";\n    TokenInstruction[TokenInstruction[\"InitializeImmutableOwner\"] = 22] = \"InitializeImmutableOwner\";\n    TokenInstruction[TokenInstruction[\"AmountToUiAmount\"] = 23] = \"AmountToUiAmount\";\n    TokenInstruction[TokenInstruction[\"UiAmountToAmount\"] = 24] = \"UiAmountToAmount\";\n    TokenInstruction[TokenInstruction[\"InitializeMintCloseAuthority\"] = 25] = \"InitializeMintCloseAuthority\";\n    TokenInstruction[TokenInstruction[\"TransferFeeExtension\"] = 26] = \"TransferFeeExtension\";\n    TokenInstruction[TokenInstruction[\"ConfidentialTransferExtension\"] = 27] = \"ConfidentialTransferExtension\";\n    TokenInstruction[TokenInstruction[\"DefaultAccountStateExtension\"] = 28] = \"DefaultAccountStateExtension\";\n    TokenInstruction[TokenInstruction[\"Reallocate\"] = 29] = \"Reallocate\";\n    TokenInstruction[TokenInstruction[\"MemoTransferExtension\"] = 30] = \"MemoTransferExtension\";\n    TokenInstruction[TokenInstruction[\"CreateNativeMint\"] = 31] = \"CreateNativeMint\";\n    TokenInstruction[TokenInstruction[\"InitializeNonTransferableMint\"] = 32] = \"InitializeNonTransferableMint\";\n    TokenInstruction[TokenInstruction[\"InterestBearingMintExtension\"] = 33] = \"InterestBearingMintExtension\";\n    TokenInstruction[TokenInstruction[\"CpiGuardExtension\"] = 34] = \"CpiGuardExtension\";\n    TokenInstruction[TokenInstruction[\"InitializePermanentDelegate\"] = 35] = \"InitializePermanentDelegate\";\n    TokenInstruction[TokenInstruction[\"TransferHookExtension\"] = 36] = \"TransferHookExtension\";\n    // ConfidentialTransferFeeExtension = 37,\n    // WithdrawalExcessLamports = 38,\n    TokenInstruction[TokenInstruction[\"MetadataPointerExtension\"] = 39] = \"MetadataPointerExtension\";\n    TokenInstruction[TokenInstruction[\"GroupPointerExtension\"] = 40] = \"GroupPointerExtension\";\n    TokenInstruction[TokenInstruction[\"GroupMemberPointerExtension\"] = 41] = \"GroupMemberPointerExtension\";\n    // ConfidentialMintBurnExtension = 42,\n    TokenInstruction[TokenInstruction[\"ScaledUiAmountExtension\"] = 43] = \"ScaledUiAmountExtension\";\n    TokenInstruction[TokenInstruction[\"PausableExtension\"] = 44] = \"PausableExtension\";\n})(TokenInstruction || (TokenInstruction = {}));\n//# sourceMappingURL=types.js.map","export var AccountType;\n(function (AccountType) {\n    AccountType[AccountType[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    AccountType[AccountType[\"Mint\"] = 1] = \"Mint\";\n    AccountType[AccountType[\"Account\"] = 2] = \"Account\";\n})(AccountType || (AccountType = {}));\nexport const ACCOUNT_TYPE_SIZE = 1;\n//# sourceMappingURL=accountType.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const multisig = MultisigLayout.decode(info.data);\n    return { address, ...multisig };\n}\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(connection, commitment) {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n//# sourceMappingURL=multisig.js.map","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Token account state as stored by the program */\nexport var AccountState;\n(function (AccountState) {\n    AccountState[AccountState[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    AccountState[AccountState[\"Initialized\"] = 1] = \"Initialized\";\n    AccountState[AccountState[\"Frozen\"] = 2] = \"Frozen\";\n})(AccountState || (AccountState = {}));\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n}\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(connection, addresses, commitment, programId = TOKEN_PROGRAM_ID) {\n    const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(connection, commitment) {\n    return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(connection, extensions, commitment) {\n    const accountLen = getAccountLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < ACCOUNT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > ACCOUNT_SIZE) {\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Account)\n            throw new TokenInvalidAccountError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\n//# sourceMappingURL=account.js.map","import { PublicKey } from '@solana/web3.js';\n/** @internal */\nexport function addSigners(keys, ownerOrAuthority, multiSigners) {\n    if (multiSigners.length) {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });\n        for (const signer of multiSigners) {\n            keys.push({\n                pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            });\n        }\n    }\n    else {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });\n    }\n    return keys;\n}\n//# sourceMappingURL=internal.js.map","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, TokenInvalidMintError, TokenOwnerOffCurveError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint)\n            throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(connection, commitment) {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(connection, extensions, commitment) {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n//# sourceMappingURL=mint.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const approveInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveInstruction(account, delegate, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: delegate, isSigner: false, isWritable: false },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(approveInstructionData.span);\n    approveInstructionData.encode({\n        instruction: TokenInstruction.Approve,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, delegate, owner, multiSigners }, data, } = decodeApproveInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Approve)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !delegate || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveInstructionUnchecked({ programId, keys: [account, delegate, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=approve.js.map","import { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);\n}\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.from([1]), programId, associatedTokenProgramId);\n}\n/**\n * Derive the associated token account and construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstructionWithDerivation(payer, owner, mint, allowOwnerOffCurve = true, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const associatedToken = getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve);\n    return createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint, programId, associatedTokenProgramId);\n}\nfunction buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, instructionData, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(nestedAssociatedToken, nestedMint, destinationAssociatedToken, ownerAssociatedToken, ownerMint, owner, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: nestedMint, isSigner: false, isWritable: false },\n        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerMint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: true },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.from([2]),\n    });\n}\n//# sourceMappingURL=associatedTokenAccount.js.map","import BN from 'bn.js';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nexport function solToLamports(amount: number): number {\n  if (isNaN(amount)) return Number(0);\n  return Number(amount * LAMPORTS_PER_SOL);\n}\n\nexport function lamportsToSol(lamports: number | BN | bigint): number {\n  if (typeof lamports === 'number') {\n    return Math.abs(lamports) / LAMPORTS_PER_SOL;\n  }\n  if (typeof lamports === 'bigint') {\n    return Math.abs(Number(lamports)) / LAMPORTS_PER_SOL;\n  }\n\n  let signMultiplier = 1;\n  if (lamports.isNeg()) {\n    signMultiplier = -1;\n  }\n\n  const absLamports = lamports.abs();\n  const lamportsString = absLamports.toString(10).padStart(10, '0');\n  const splitIndex = lamportsString.length - 9;\n  const solString = lamportsString.slice(0, splitIndex) + '.' + lamportsString.slice(splitIndex);\n  return signMultiplier * parseFloat(solString);\n}\n","import { Buffer } from 'buffer';\nimport { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\n\n// Public key that identifies the metadata program.\nexport const METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');\nexport const METADATA_MAX_NAME_LENGTH = 32;\nexport const METADATA_MAX_SYMBOL_LENGTH = 10;\nexport const METADATA_MAX_URI_LENGTH = 200;\n\n// Public key that identifies the SPL Stake Pool program.\nexport const STAKE_POOL_PROGRAM_ID = new PublicKey('SPoo1Ku8WFXoNDMHPsrGSTSG1Y47rzgn41SLUNakuHy');\n\n// Maximum number of validators to update during UpdateValidatorListBalance.\nexport const MAX_VALIDATORS_TO_UPDATE = 5;\n\n// Seed for ephemeral stake account\nexport const EPHEMERAL_STAKE_SEED_PREFIX = Buffer.from('ephemeral');\n\n// Seed used to derive transient stake accounts.\nexport const TRANSIENT_STAKE_SEED_PREFIX = Buffer.from('transient');\n\n// Minimum amount of staked SOL required in a validator stake account to allow\n// for merges without a mismatch on credits observed\nexport const MINIMUM_ACTIVE_STAKE = LAMPORTS_PER_SOL;\n","import { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Buffer } from 'buffer';\nimport {\n  METADATA_PROGRAM_ID,\n  EPHEMERAL_STAKE_SEED_PREFIX,\n  TRANSIENT_STAKE_SEED_PREFIX,\n} from '../constants';\n\n/**\n * Generates the withdraw authority program address for the stake pool\n */\nexport async function findWithdrawAuthorityProgramAddress(\n  programId: PublicKey,\n  stakePoolAddress: PublicKey,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [stakePoolAddress.toBuffer(), Buffer.from('withdraw')],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the stake program address for a validator's vote account\n */\nexport async function findStakeProgramAddress(\n  programId: PublicKey,\n  voteAccountAddress: PublicKey,\n  stakePoolAddress: PublicKey,\n  seed?: number,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [\n      voteAccountAddress.toBuffer(),\n      stakePoolAddress.toBuffer(),\n      seed ? new BN(seed).toArrayLike(Buffer, 'le', 4) : Buffer.alloc(0),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the stake program address for a validator's vote account\n */\nexport async function findTransientStakeProgramAddress(\n  programId: PublicKey,\n  voteAccountAddress: PublicKey,\n  stakePoolAddress: PublicKey,\n  seed: BN,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [\n      TRANSIENT_STAKE_SEED_PREFIX,\n      voteAccountAddress.toBuffer(),\n      stakePoolAddress.toBuffer(),\n      seed.toArrayLike(Buffer, 'le', 8),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the ephemeral program address for stake pool redelegation\n */\nexport async function findEphemeralStakeProgramAddress(\n  programId: PublicKey,\n  stakePoolAddress: PublicKey,\n  seed: BN,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [EPHEMERAL_STAKE_SEED_PREFIX, stakePoolAddress.toBuffer(), seed.toArrayLike(Buffer, 'le', 8)],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the metadata program address for the stake pool\n */\nexport function findMetadataAddress(stakePoolMintAddress: PublicKey) {\n  const [publicKey] = PublicKey.findProgramAddressSync(\n    [Buffer.from('metadata'), METADATA_PROGRAM_ID.toBuffer(), stakePoolMintAddress.toBuffer()],\n    METADATA_PROGRAM_ID,\n  );\n  return publicKey;\n}\n","/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Support for translating between Buffer instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n\n'use strict';\n\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n  constructor(span, property) {\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n    this.span = span;\n\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n  makeDestinationObject() {\n    return {};\n  }\n\n  /**\n   * Decode from a Buffer into an JavaScript value.\n   *\n   * @param {Buffer} b - the buffer from which encoded data is read.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {(Number|Array|Object)} - the value of the decoded data.\n   *\n   * @abstract\n   */\n  decode(b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Encode a JavaScript value into a Buffer.\n   *\n   * @param {(Number|Array|Object)} src - the value to be encoded into\n   * the buffer.  The type accepted depends on the (sub-)type of {@link\n   * Layout}.\n   *\n   * @param {Buffer} b - the buffer into which encoded data will be\n   * written.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {Number} - the number of bytes encoded, including the\n   * space skipped for internal padding, but excluding data such as\n   * {@link Sequence#count|lengths} when stored {@link\n   * ExternalLayout|externally}.  This is the adjustment to `offset`\n   * producing the offset where data for the next layout would be\n   * written.\n   *\n   * @abstract\n   */\n  encode(src, b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Calculate the span of a specific instance of a layout.\n   *\n   * @param {Buffer} b - the buffer that contains an encoded instance.\n   *\n   * @param {Number} [offset] - the offset at which the encoded instance\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @return {Number} - the number of bytes covered by the layout\n   * instance.  If this method is not overridden in a subclass the\n   * definition-time constant {@link Layout#span|span} will be\n   * returned.\n   *\n   * @throws {RangeError} - if the length of the value cannot be\n   * determined.\n   */\n  getSpan(b, offset) {\n    if (0 > this.span) {\n      throw new RangeError('indeterminate span');\n    }\n    return this.span;\n  }\n\n  /**\n   * Replicate the layout using a new property.\n   *\n   * This function must be used to get a structurally-equivalent layout\n   * with a different name since all {@link Layout} instances are\n   * immutable.\n   *\n   * **NOTE** This is a shallow copy.  All fields except {@link\n   * Layout#property|property} are strictly equal to the origin layout.\n   *\n   * @param {String} property - the value for {@link\n   * Layout#property|property} in the replica.\n   *\n   * @returns {Layout} - the copy with {@link Layout#property|property}\n   * set to `property`.\n   */\n  replicate(property) {\n    const rv = Object.create(this.constructor.prototype);\n    Object.assign(rv, this);\n    rv.property = property;\n    return rv;\n  }\n\n  /**\n   * Create an object from layout properties and an array of values.\n   *\n   * **NOTE** This function returns `undefined` if invoked on a layout\n   * that does not return its value as an Object.  Objects are\n   * returned for things that are a {@link Structure}, which includes\n   * {@link VariantLayout|variant layouts} if they are structures, and\n   * excludes {@link Union}s.  If you want this feature for a union\n   * you must use {@link Union.getVariant|getVariant} to select the\n   * desired layout.\n   *\n   * @param {Array} values - an array of values that correspond to the\n   * default order for properties.  As with {@link Layout#decode|decode}\n   * layout elements that have no property name are skipped when\n   * iterating over the array values.  Only the top-level properties are\n   * assigned; arguments are not assigned to properties of contained\n   * layouts.  Any unused values are ignored.\n   *\n   * @return {(Object|undefined)}\n   */\n  fromArray(values) {\n    return undefined;\n  }\n}\nexports.Layout = Layout;\n\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n  return name;\n}\nexports.nameWithProperty = nameWithProperty;\n\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n  if (Class.hasOwnProperty('layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n  if (!(layout && (layout instanceof Layout))) {\n    throw new TypeError('layout must be a Layout');\n  }\n  if (layout.hasOwnProperty('boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n  layout.makeDestinationObject = (() => new Class());\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function(b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true,\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function(b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true,\n  });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n  /**\n   * Return `true` iff the external layout decodes to an unsigned\n   * integer layout.\n   *\n   * In that case it can be used as the source of {@link\n   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n   * or as {@link UnionLayoutDiscriminator#layout|external union\n   * discriminators}.\n   *\n   * @abstract\n   */\n  isCount() {\n    throw new Error('ExternalLayout is abstract');\n  }\n}\n\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n  constructor(elementSpan, property) {\n    if (undefined === elementSpan) {\n      elementSpan = 1;\n    }\n    if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n    super(-1, property);\n\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n    this.elementSpan = elementSpan;\n  }\n\n  /** @override */\n  isCount() {\n    return true;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rem = b.length - offset;\n    return Math.floor(rem / this.elementSpan);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    return 0;\n  }\n}\n\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n  constructor(layout, offset, property) {\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    } else if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    super(layout.span, property || layout.property);\n\n    /** The subordinated layout. */\n    this.layout = layout;\n\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Buffer\n     * being accessed.  */\n    this.offset = offset;\n  }\n\n  /** @override */\n  isCount() {\n    return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.decode(b, offset + this.offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.encode(src, b, offset + this.offset);\n  }\n}\n\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n  constructor(span, property) {\n    super( span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\nconst V2E32 = Math.pow(2, 32);\n\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n  const hi32 = Math.floor(src / V2E32);\n  const lo32 = src - (hi32 * V2E32);\n  return {hi32, lo32};\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readUInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeUInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readUInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatLE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatBE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleLE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleBE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n  constructor(elementLayout, count, property) {\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n    if (!(((count instanceof ExternalLayout) && count.isCount())\n          || (Number.isInteger(count) && (0 <= count)))) {\n      throw new TypeError('count must be non-negative integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n    let span = -1;\n    if ((!(count instanceof ExternalLayout))\n        && (0 < elementLayout.span)) {\n      span = count * elementLayout.span;\n    }\n\n    super(span, property);\n\n    /** The layout for individual elements of the sequence. */\n    this.elementLayout = elementLayout;\n\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n    this.count = count;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    if (0 < this.elementLayout.span) {\n      span = count * this.elementLayout.span;\n    } else {\n      let idx = 0;\n      while (idx < count) {\n        span += this.elementLayout.getSpan(b, offset + span);\n        ++idx;\n      }\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rv = [];\n    let i = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    while (i < count) {\n      rv.push(this.elementLayout.decode(b, offset));\n      offset += this.elementLayout.getSpan(b, offset);\n      i += 1;\n    }\n    return rv;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n   *\n   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n   * the unused space in the buffer is left unchanged.  If `src` is\n   * longer than {@link Sequence#count|count} the unneeded elements are\n   * ignored.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const elo = this.elementLayout;\n    const span = src.reduce((span, v) => {\n      return span + elo.encode(v, b, offset + span);\n    }, 0);\n    if (this.count instanceof ExternalLayout) {\n      this.count.encode(src.length, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n  constructor(fields, property, decodePrefixes) {\n    if (!(Array.isArray(fields)\n          && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n    if (('boolean' === typeof property)\n        && (undefined === decodePrefixes)) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n\n    /* Verify absence of unnamed variable-length fields. */\n    for (const fd of fields) {\n      if ((0 > fd.span)\n          && (undefined === fd.property)) {\n        throw new Error('fields cannot contain unnamed variable-length layout');\n      }\n    }\n\n    let span = -1;\n    try {\n      span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n    } catch (e) {\n    }\n    super(span, property);\n\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n    this.fields = fields;\n\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n    this.decodePrefixes = !!decodePrefixes;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    try {\n      span = this.fields.reduce((span, fd) => {\n        const fsp = fd.getSpan(b, offset);\n        offset += fsp;\n        return span + fsp;\n      }, 0);\n    } catch (e) {\n      throw new RangeError('indeterminate span');\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b, offset);\n      }\n      offset += fd.getSpan(b, offset);\n      if (this.decodePrefixes\n          && (b.length === offset)) {\n        break;\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Structure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the buffer is\n   * left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const firstOffset = offset;\n    let lastOffset = 0;\n    let lastWrote = 0;\n    for (const fd of this.fields) {\n      let span = fd.span;\n      lastWrote = (0 < span) ? span : 0;\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          lastWrote = fd.encode(fv, b, offset);\n          if (0 > span) {\n            /* Read the as-encoded span, which is not necessarily the\n             * same as what we wrote. */\n            span = fd.getSpan(b, offset);\n          }\n        }\n      }\n      lastOffset = offset;\n      offset += span;\n    }\n    /* Use (lastOffset + lastWrote) instead of offset because the last\n     * item may have had a dynamic length and we don't want to include\n     * the padding between it and the end of the space reserved for\n     * it. */\n    return (lastOffset + lastWrote) - firstOffset;\n  }\n\n  /** @override */\n  fromArray(values) {\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if ((undefined !== fd.property)\n          && (0 < values.length)) {\n        dest[fd.property] = values.shift();\n      }\n    }\n    return dest;\n  }\n\n  /**\n   * Get access to the layout of a given property.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Layout} - the layout associated with `property`, or\n   * undefined if there is no such property.\n   */\n  layoutFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n\n  /**\n   * Get the offset of a structure member.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Number} - the offset in bytes to the start of `property`\n   * within the structure, or undefined if `property` is not a field\n   * within the structure.  If the property is a member but follows a\n   * variable-length structure member a negative number will be\n   * returned.\n   */\n  offsetOf(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    let offset = 0;\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return offset;\n      }\n      if (0 > fd.span) {\n        offset = -1;\n      } else if (0 <= offset) {\n        offset += fd.span;\n      }\n    }\n  }\n}\n\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n  constructor(property) {\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n  decode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n\n  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n   *\n   * The implementation of this method need not store the value if\n   * variant information is maintained through other means. */\n  encode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n}\n\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n  constructor(layout, property) {\n    if (!((layout instanceof ExternalLayout)\n          && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    super(property || layout.property || 'variant');\n\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n    this.layout = layout;\n  }\n\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  decode(b, offset) {\n    return this.layout.decode(b, offset);\n  }\n\n  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  encode(src, b, offset) {\n    return this.layout.encode(src, b, offset);\n  }\n}\n\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n  constructor(discr, defaultLayout, property) {\n    const upv = ((discr instanceof UInt)\n               || (discr instanceof UIntBE));\n    if (upv) {\n      discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if ((discr instanceof ExternalLayout)\n               && discr.isCount()) {\n      discr = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator '\n                          + 'or an unsigned integer layout');\n    }\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n    if (!((null === defaultLayout)\n          || (defaultLayout instanceof Layout))) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n    let span = -1;\n    if (defaultLayout) {\n      span = defaultLayout.span;\n      if ((0 <= span) && upv) {\n        span += discr.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n    this.discriminator = discr;\n\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n    this.usesPrefixDiscriminator = upv;\n\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n    this.defaultLayout = defaultLayout;\n\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n    this.registry = {};\n\n    /* Private variable used when invoking getSourceVariant */\n    let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n    this.getSourceVariant = function(src) {\n      return boundGetSourceVariant(src);\n    };\n\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n    this.configGetSourceVariant = function(gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Default layouts always have non-negative span, so we don't have\n     * one and we have to recognize the variant which will in turn\n     * determine the span. */\n    const vlo = this.getVariant(b, offset);\n    if (!vlo) {\n      throw new Error('unable to determine span for unrecognized variant');\n    }\n    return vlo.getSpan(b, offset);\n  }\n\n  /**\n   * Method to infer a registered Union variant compatible with `src`.\n   *\n   * The first satisified rule in the following sequence defines the\n   * return value:\n   * * If `src` has properties matching the Union discriminator and\n   *   the default layout, `undefined` is returned regardless of the\n   *   value of the discriminator property (this ensures the default\n   *   layout will be used);\n   * * If `src` has a property matching the Union discriminator, the\n   *   value of the discriminator identifies a registered variant, and\n   *   either (a) the variant has no layout, or (b) `src` has the\n   *   variant's property, then the variant is returned (because the\n   *   source satisfies the constraints of the variant it identifies);\n   * * If `src` does not have a property matching the Union\n   *   discriminator, but does have a property matching a registered\n   *   variant, then the variant is returned (because the source\n   *   matches a variant without an explicit conflict);\n   * * An error is thrown (because we either can't identify a variant,\n   *   or we were explicitly told the variant but can't satisfy it).\n   *\n   * @param {Object} src - an object presumed to be compatible with\n   * the content of the Union.\n   *\n   * @return {(undefined|VariantLayout)} - as described above.\n   *\n   * @throws {Error} - if `src` cannot be associated with a default or\n   * registered variant.\n   */\n  defaultGetSourceVariant(src) {\n    if (src.hasOwnProperty(this.discriminator.property)) {\n      if (this.defaultLayout\n          && src.hasOwnProperty(this.defaultLayout.property)) {\n        return undefined;\n      }\n      const vlo = this.registry[src[this.discriminator.property]];\n      if (vlo\n          && ((!vlo.layout)\n              || src.hasOwnProperty(vlo.property))) {\n        return vlo;\n      }\n    } else {\n      for (const tag in this.registry) {\n        const vlo = this.registry[tag];\n        if (src.hasOwnProperty(vlo.property)) {\n          return vlo;\n        }\n      }\n    }\n    throw new Error('unable to infer src variant');\n  }\n\n  /** Implement {@link Layout#decode|decode} for {@link Union}.\n   *\n   * If the variant is {@link Union#addVariant|registered} the return\n   * value is an instance of that variant, with no explicit\n   * discriminator.  Otherwise the {@link Union#defaultLayout|default\n   * layout} is used to decode the content. */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let dest;\n    const dlo = this.discriminator;\n    const discr = dlo.decode(b, offset);\n    let clo = this.registry[discr];\n    if (undefined === clo) {\n      let contentOffset = 0;\n      clo = this.defaultLayout;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dest = this.makeDestinationObject();\n      dest[dlo.property] = discr;\n      dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);\n    } else {\n      dest = clo.decode(b, offset);\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Union}.\n   *\n   * This API assumes the `src` object is consistent with the union's\n   * {@link Union#defaultLayout|default layout}.  To encode variants\n   * use the appropriate variant-specific {@link VariantLayout#encode}\n   * method. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const vlo = this.getSourceVariant(src);\n    if (undefined === vlo) {\n      const dlo = this.discriminator;\n      const clo = this.defaultLayout;\n      let contentOffset = 0;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dlo.encode(src[dlo.property], b, offset);\n      return contentOffset + clo.encode(src[clo.property], b,\n                                        offset + contentOffset);\n    }\n    return vlo.encode(src, b, offset);\n  }\n\n  /** Register a new variant structure within a union.  The newly\n   * created variant is returned.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} layout - initializer for {@link\n   * VariantLayout#layout|layout}.\n   *\n   * @param {String} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {VariantLayout} */\n  addVariant(variant, layout, property) {\n    const rv = new VariantLayout(this, variant, layout, property);\n    this.registry[variant] = rv;\n    return rv;\n  }\n\n  /**\n   * Get the layout associated with a registered variant.\n   *\n   * If `vb` does not produce a registered variant the function returns\n   * `undefined`.\n   *\n   * @param {(Number|Buffer)} vb - either the variant number, or a\n   * buffer from which the discriminator is to be read.\n   *\n   * @param {Number} offset - offset into `vb` for the start of the\n   * union.  Used only when `vb` is an instance of {Buffer}.\n   *\n   * @return {({VariantLayout}|undefined)}\n   */\n  getVariant(vb, offset) {\n    let variant = vb;\n    if (Buffer.isBuffer(vb)) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n      variant = this.discriminator.decode(vb, offset);\n    }\n    return this.registry[variant];\n  }\n}\n\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n  constructor(union, variant, layout, property) {\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n    if ((!Number.isInteger(variant)) || (0 > variant)) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n    if (('string' === typeof layout)\n        && (undefined === property)) {\n      property = layout;\n      layout = null;\n    }\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n      if ((null !== union.defaultLayout)\n          && (0 <= layout.span)\n          && (layout.span > union.defaultLayout.span)) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n    let span = union.span;\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n      if ((0 <= span) && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The {@link Union} to which this variant belongs. */\n    this.union = union;\n\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n    this.variant = variant;\n\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n    this.layout = layout || null;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      /* Will be equal to the containing union span if that is not\n       * variable. */\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    /* Span is defined solely by the variant (and prefix discriminator) */\n    return contentOffset + this.layout.getSpan(b, offset + contentOffset);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    if (this !== this.union.getVariant(b, offset)) {\n      throw new Error('variant mismatch');\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout) {\n      dest[this.property] = this.layout.decode(b, offset + contentOffset);\n    } else if (this.property) {\n      dest[this.property] = true;\n    } else if (this.union.usesPrefixDiscriminator) {\n      dest[this.union.discriminator.property] = this.variant;\n    }\n    return dest;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout\n        && (!src.hasOwnProperty(this.property))) {\n      throw new TypeError('variant lacks property ' + this.property);\n    }\n    this.union.discriminator.encode(this.variant, b, offset);\n    let span = contentOffset;\n    if (this.layout) {\n      this.layout.encode(src[this.property], b, offset + contentOffset);\n      span += this.layout.getSpan(b, offset + contentOffset);\n      if ((0 <= this.union.span)\n          && (span > this.union.span)) {\n        throw new Error('encoded variant overruns containing union');\n      }\n    }\n    return span;\n  }\n\n  /** Delegate {@link Layout#fromArray|fromArray} to {@link\n   * VariantLayout#layout|layout}. */\n  fromArray(values) {\n    if (this.layout) {\n      return this.layout.fromArray(values);\n    }\n  }\n}\n\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n  return v;\n}\n\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n  constructor(word, msb, property) {\n    if (!((word instanceof UInt)\n          || (word instanceof UIntBE))) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n    if (('string' === typeof msb)\n        && (undefined === property)) {\n      property = msb;\n      msb = undefined;\n    }\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n    super(word.span, property);\n\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n    this.word = word;\n\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n    this.msb = !!msb;\n\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n    this.fields = [];\n\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n    let value = 0;\n    this._packedSetValue = function(v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n    this._packedGetValue = function() {\n      return value;\n    };\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(value);\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the packed\n   * value is left unmodified.  Unused bits are also left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          fd.encode(fv);\n        }\n      }\n    }\n    return this.word.encode(this._packedGetValue(), b, offset);\n  }\n\n  /** Register a new bitfield with a containing bit structure.  The\n   * resulting bitfield is returned.\n   *\n   * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {BitField} */\n  addField(bits, property) {\n    const bf = new BitField(this, bits, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /** As with {@link BitStructure#addField|addField} for single-bit\n   * fields with `boolean` value representation.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {Boolean} */\n  addBoolean(property) {\n    // This is my Boolean, not the Javascript one.\n    // eslint-disable-next-line no-new-wrappers\n    const bf = new Boolean(this, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /**\n   * Get access to the bit field for a given property.\n   *\n   * @param {String} property - the bit field of interest.\n   *\n   * @return {BitField} - the field associated with `property`, or\n   * undefined if there is no such property.\n   */\n  fieldFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n}\n\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n  constructor(container, bits, property) {\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n    if ((!Number.isInteger(bits)) || (0 >= bits)) {\n      throw new TypeError('bits must be positive integer');\n    }\n    const totalBits = 8 * container.span;\n    const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n    if ((bits + usedBits) > totalBits) {\n      throw new Error('bits too long for span remainder ('\n                      + (totalBits - usedBits) + ' of '\n                      + totalBits + ' remain)');\n    }\n\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n    this.container = container;\n\n    /** The span of this value in bits. */\n    this.bits = bits;\n\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n    this.valueMask = (1 << bits) - 1;\n    if (32 === bits) { // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n    this.start = usedBits;\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n  decode() {\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(word & this.wordMask);\n    const value = wordValue >>> this.start;\n    return value;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field.\n   *\n   * **NOTE** This is not a specialization of {@link\n   * Layout#encode|Layout.encode} and there is no return value. */\n  encode(value) {\n    if ((!Number.isInteger(value))\n        || (value !== fixBitwiseResult(value & this.valueMask))) {\n      throw new TypeError(nameWithProperty('BitField.encode', this)\n                          + ' value must be integer not exceeding ' + this.valueMask);\n    }\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(value << this.start);\n    this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n                                   | wordValue);\n  };\n}\n\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n  constructor(container, property) {\n    super(container, 1, property);\n  }\n\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n  decode(b, offset) {\n    return !!BitField.prototype.decode.call(this, b, offset);\n  }\n\n  /** @override */\n  encode(value) {\n    if ('boolean' === typeof value) {\n      // BitField requires integer values\n      value = +value;\n    }\n    return BitField.prototype.encode.call(this, value);\n  }\n}\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Buffer.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n  constructor(length, property) {\n    if (!(((length instanceof ExternalLayout) && length.isCount())\n          || (Number.isInteger(length) && (0 <= length)))) {\n      throw new TypeError('length must be positive integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n\n    let span = -1;\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n    super(span, property);\n\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n    this.length = length;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return b.slice(offset, offset + span);\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Blob}.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    let span = this.length;\n    if (this.length instanceof ExternalLayout) {\n      span = src.length;\n    }\n    if (!(Buffer.isBuffer(src)\n          && (span === src.length))) {\n      throw new TypeError(nameWithProperty('Blob.encode', this)\n                          + ' requires (length ' + span + ') Buffer as src');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    b.write(src.toString('hex'), offset, span, 'hex');\n    if (this.length instanceof ExternalLayout) {\n      this.length.encode(span, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n  constructor(property) {\n    super(-1, property);\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let idx = offset;\n    while ((idx < b.length) && (0 !== b[idx])) {\n      idx += 1;\n    }\n    return 1 + idx - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    return b.slice(offset, offset + span - 1).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new Buffer(src, 'utf8');\n    const span = srcb.length;\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    b[offset + span] = 0;\n    return span + 1;\n  }\n}\n\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n  constructor(maxSpan, property) {\n    if (('string' === typeof maxSpan)\n        && (undefined === property)) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n\n    super(-1, property);\n\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n    this.maxSpan = maxSpan;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.length - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    if ((0 <= this.maxSpan)\n        && (this.maxSpan < span)) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    return b.slice(offset, offset + span).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new Buffer(src, 'utf8');\n    const span = srcb.length;\n    if ((0 <= this.maxSpan)\n        && (this.maxSpan < span)) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    return span;\n  }\n}\n\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n  constructor(value, property) {\n    super(0, property);\n\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n    this.value = value;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    return this.value;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    /* Constants take no space */\n    return 0;\n  }\n}\n\nexports.ExternalLayout = ExternalLayout;\nexports.GreedyCount = GreedyCount;\nexports.OffsetLayout = OffsetLayout;\nexports.UInt = UInt;\nexports.UIntBE = UIntBE;\nexports.Int = Int;\nexports.IntBE = IntBE;\nexports.Float = Float;\nexports.FloatBE = FloatBE;\nexports.Double = Double;\nexports.DoubleBE = DoubleBE;\nexports.Sequence = Sequence;\nexports.Structure = Structure;\nexports.UnionDiscriminator = UnionDiscriminator;\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\nexports.Union = Union;\nexports.VariantLayout = VariantLayout;\nexports.BitStructure = BitStructure;\nexports.BitField = BitField;\nexports.Boolean = Boolean;\nexports.Blob = Blob;\nexports.CString = CString;\nexports.UTF8 = UTF8;\nexports.Constant = Constant;\n\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = (property => new UInt(1, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = (property => new UInt(2, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = (property => new UInt(3, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = (property => new UInt(4, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = (property => new UInt(5, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = (property => new UInt(6, property));\n\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = (property => new NearUInt64(property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = (property => new UIntBE(2, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = (property => new UIntBE(3, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = (property => new UIntBE(4, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = (property => new UIntBE(5, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = (property => new UIntBE(6, property));\n\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = (property => new NearUInt64BE(property));\n\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = (property => new Int(1, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = (property => new Int(2, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = (property => new Int(3, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = (property => new Int(4, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = (property => new Int(5, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = (property => new Int(6, property));\n\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = (property => new NearInt64(property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = (property => new IntBE(2, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = (property => new IntBE(3, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = (property => new IntBE(4, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = (property => new IntBE(5, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = (property => new IntBE(6, property));\n\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = (property => new NearInt64BE(property));\n\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = (property => new Float(property));\n\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = (property => new FloatBE(property));\n\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = (property => new Double(property));\n\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = (property => new DoubleBE(property));\n\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n\n/** Factory for {@link CString} values. */\nexports.cstr = (property => new CString(property));\n\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n\n/** Factory for {@link Constant} values. */\nexports.const = ((value, property) => new Constant(value, property));","import { blob, Layout as LayoutCls, offset, seq, struct, u32, u8 } from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\n\nexport interface Layout<T> {\n  span: number;\n  property?: string;\n\n  decode(b: Buffer, offset?: number): T;\n\n  encode(src: T, b: Buffer, offset?: number): number;\n\n  getSpan(b: Buffer, offset?: number): number;\n\n  replicate(name: string): this;\n}\n\nclass BNLayout extends LayoutCls<BN> {\n  blob: Layout<Buffer>;\n  signed: boolean;\n\n  constructor(span: number, signed: boolean, property?: string) {\n    super(span, property);\n    this.blob = blob(span);\n    this.signed = signed;\n  }\n\n  decode(b: Buffer, offset = 0) {\n    const num = new BN(this.blob.decode(b, offset), 10, 'le');\n    if (this.signed) {\n      return num.fromTwos(this.span * 8).clone();\n    }\n    return num;\n  }\n\n  encode(src: BN, b: Buffer, offset = 0) {\n    if (this.signed) {\n      src = src.toTwos(this.span * 8);\n    }\n    return this.blob.encode(src.toArrayLike(Buffer, 'le', this.span), b, offset);\n  }\n}\n\nexport function u64(property?: string): Layout<BN> {\n  return new BNLayout(8, false, property);\n}\n\nclass WrappedLayout<T, U> extends LayoutCls<U> {\n  layout: Layout<T>;\n  decoder: (data: T) => U;\n  encoder: (src: U) => T;\n\n  constructor(\n    layout: Layout<T>,\n    decoder: (data: T) => U,\n    encoder: (src: U) => T,\n    property?: string,\n  ) {\n    super(layout.span, property);\n    this.layout = layout;\n    this.decoder = decoder;\n    this.encoder = encoder;\n  }\n\n  decode(b: Buffer, offset?: number): U {\n    return this.decoder(this.layout.decode(b, offset));\n  }\n\n  encode(src: U, b: Buffer, offset?: number): number {\n    return this.layout.encode(this.encoder(src), b, offset);\n  }\n\n  getSpan(b: Buffer, offset?: number): number {\n    return this.layout.getSpan(b, offset);\n  }\n}\n\nexport function publicKey(property?: string): Layout<PublicKey> {\n  return new WrappedLayout(\n    blob(32),\n    (b: Buffer) => new PublicKey(b),\n    (key: PublicKey) => key.toBuffer(),\n    property,\n  );\n}\n\nclass OptionLayout<T> extends LayoutCls<T | null> {\n  layout: Layout<T>;\n  discriminator: Layout<number>;\n\n  constructor(layout: Layout<T>, property?: string) {\n    super(-1, property);\n    this.layout = layout;\n    this.discriminator = u8();\n  }\n\n  encode(src: T | null, b: Buffer, offset = 0): number {\n    if (src === null || src === undefined) {\n      return this.discriminator.encode(0, b, offset);\n    }\n    this.discriminator.encode(1, b, offset);\n    return this.layout.encode(src, b, offset + 1) + 1;\n  }\n\n  decode(b: Buffer, offset = 0): T | null {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return null;\n    } else if (discriminator === 1) {\n      return this.layout.decode(b, offset + 1);\n    }\n    throw new Error('Invalid option ' + this.property);\n  }\n\n  getSpan(b: Buffer, offset = 0): number {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return 1;\n    } else if (discriminator === 1) {\n      return this.layout.getSpan(b, offset + 1) + 1;\n    }\n    throw new Error('Invalid option ' + this.property);\n  }\n}\n\nexport function option<T>(layout: Layout<T>, property?: string): Layout<T | null> {\n  return new OptionLayout<T>(layout, property);\n}\n\nexport function bool(property?: string): Layout<boolean> {\n  return new WrappedLayout(u8(), decodeBool, encodeBool, property);\n}\n\nfunction decodeBool(value: number): boolean {\n  if (value === 0) {\n    return false;\n  } else if (value === 1) {\n    return true;\n  }\n  throw new Error('Invalid bool: ' + value);\n}\n\nfunction encodeBool(value: boolean): number {\n  return value ? 1 : 0;\n}\n\nexport function vec<T>(elementLayout: Layout<T>, property?: string): Layout<T[]> {\n  const length = u32('length');\n  const layout: Layout<{ values: T[] }> = struct([\n    length,\n    seq(elementLayout, offset(length, -length.span), 'values'),\n  ]);\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n","import { Layout, publicKey, u64, option, vec } from './codecs';\nimport { struct, Layout as LayoutCls, u8, u32 } from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport {\n  Infer,\n  number,\n  nullable,\n  enums,\n  type,\n  coerce,\n  instance,\n  string,\n  optional,\n} from 'superstruct';\n\nexport interface Fee {\n  denominator: BN;\n  numerator: BN;\n}\n\nconst feeFields = [u64('denominator'), u64('numerator')];\n\nexport enum AccountType {\n  Uninitialized,\n  StakePool,\n  ValidatorList,\n}\n\nexport const BigNumFromString = coerce(instance(BN), string(), (value) => {\n  if (typeof value === 'string') return new BN(value, 10);\n  throw new Error('invalid big num');\n});\n\nexport const PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  (value) => new PublicKey(value),\n);\n\nexport class FutureEpochLayout<T> extends LayoutCls<T | null> {\n  layout: Layout<T>;\n  discriminator: Layout<number>;\n\n  constructor(layout: Layout<T>, property?: string) {\n    super(-1, property);\n    this.layout = layout;\n    this.discriminator = u8();\n  }\n\n  encode(src: T | null, b: Buffer, offset = 0): number {\n    if (src === null || src === undefined) {\n      return this.discriminator.encode(0, b, offset);\n    }\n    // This isn't right, but we don't typically encode outside of tests\n    this.discriminator.encode(2, b, offset);\n    return this.layout.encode(src, b, offset + 1) + 1;\n  }\n\n  decode(b: Buffer, offset = 0): T | null {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return null;\n    } else if (discriminator === 1 || discriminator === 2) {\n      return this.layout.decode(b, offset + 1);\n    }\n    throw new Error('Invalid future epoch ' + this.property);\n  }\n\n  getSpan(b: Buffer, offset = 0): number {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return 1;\n    } else if (discriminator === 1 || discriminator === 2) {\n      return this.layout.getSpan(b, offset + 1) + 1;\n    }\n    throw new Error('Invalid future epoch ' + this.property);\n  }\n}\n\nexport function futureEpoch<T>(layout: Layout<T>, property?: string): LayoutCls<T | null> {\n  return new FutureEpochLayout<T>(layout, property);\n}\n\nexport type StakeAccountType = Infer<typeof StakeAccountType>;\nexport const StakeAccountType = enums(['uninitialized', 'initialized', 'delegated', 'rewardsPool']);\n\nexport type StakeMeta = Infer<typeof StakeMeta>;\nexport const StakeMeta = type({\n  rentExemptReserve: BigNumFromString,\n  authorized: type({\n    staker: PublicKeyFromString,\n    withdrawer: PublicKeyFromString,\n  }),\n  lockup: type({\n    unixTimestamp: number(),\n    epoch: number(),\n    custodian: PublicKeyFromString,\n  }),\n});\n\nexport type StakeAccountInfo = Infer<typeof StakeAccountInfo>;\nexport const StakeAccountInfo = type({\n  meta: StakeMeta,\n  stake: nullable(\n    type({\n      delegation: type({\n        voter: PublicKeyFromString,\n        stake: BigNumFromString,\n        activationEpoch: BigNumFromString,\n        deactivationEpoch: BigNumFromString,\n        warmupCooldownRate: number(),\n      }),\n      creditsObserved: number(),\n    }),\n  ),\n});\n\nexport type StakeAccount = Infer<typeof StakeAccount>;\nexport const StakeAccount = type({\n  type: StakeAccountType,\n  info: optional(StakeAccountInfo),\n});\nexport interface Lockup {\n  unixTimestamp: BN;\n  epoch: BN;\n  custodian: PublicKey;\n}\n\nexport interface StakePool {\n  accountType: AccountType;\n  manager: PublicKey;\n  staker: PublicKey;\n  stakeDepositAuthority: PublicKey;\n  stakeWithdrawBumpSeed: number;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  poolMint: PublicKey;\n  managerFeeAccount: PublicKey;\n  tokenProgramId: PublicKey;\n  totalLamports: BN;\n  poolTokenSupply: BN;\n  lastUpdateEpoch: BN;\n  lockup: Lockup;\n  epochFee: Fee;\n  nextEpochFee?: Fee | undefined;\n  preferredDepositValidatorVoteAddress?: PublicKey | undefined;\n  preferredWithdrawValidatorVoteAddress?: PublicKey | undefined;\n  stakeDepositFee: Fee;\n  stakeWithdrawalFee: Fee;\n  nextStakeWithdrawalFee?: Fee | undefined;\n  stakeReferralFee: number;\n  solDepositAuthority?: PublicKey | undefined;\n  solDepositFee: Fee;\n  solReferralFee: number;\n  solWithdrawAuthority?: PublicKey | undefined;\n  solWithdrawalFee: Fee;\n  nextSolWithdrawalFee?: Fee | undefined;\n  lastEpochPoolTokenSupply: BN;\n  lastEpochTotalLamports: BN;\n}\n\nexport const StakePoolLayout = struct<StakePool>([\n  u8('accountType'),\n  publicKey('manager'),\n  publicKey('staker'),\n  publicKey('stakeDepositAuthority'),\n  u8('stakeWithdrawBumpSeed'),\n  publicKey('validatorList'),\n  publicKey('reserveStake'),\n  publicKey('poolMint'),\n  publicKey('managerFeeAccount'),\n  publicKey('tokenProgramId'),\n  u64('totalLamports'),\n  u64('poolTokenSupply'),\n  u64('lastUpdateEpoch'),\n  struct([u64('unixTimestamp'), u64('epoch'), publicKey('custodian')], 'lockup'),\n  struct(feeFields, 'epochFee'),\n  futureEpoch(struct(feeFields), 'nextEpochFee'),\n  option(publicKey(), 'preferredDepositValidatorVoteAddress'),\n  option(publicKey(), 'preferredWithdrawValidatorVoteAddress'),\n  struct(feeFields, 'stakeDepositFee'),\n  struct(feeFields, 'stakeWithdrawalFee'),\n  futureEpoch(struct(feeFields), 'nextStakeWithdrawalFee'),\n  u8('stakeReferralFee'),\n  option(publicKey(), 'solDepositAuthority'),\n  struct(feeFields, 'solDepositFee'),\n  u8('solReferralFee'),\n  option(publicKey(), 'solWithdrawAuthority'),\n  struct(feeFields, 'solWithdrawalFee'),\n  futureEpoch(struct(feeFields), 'nextSolWithdrawalFee'),\n  u64('lastEpochPoolTokenSupply'),\n  u64('lastEpochTotalLamports'),\n]);\n\nexport enum ValidatorStakeInfoStatus {\n  Active,\n  DeactivatingTransient,\n  ReadyForRemoval,\n}\n\nexport interface ValidatorStakeInfo {\n  status: ValidatorStakeInfoStatus;\n  voteAccountAddress: PublicKey;\n  activeStakeLamports: BN;\n  transientStakeLamports: BN;\n  transientSeedSuffixStart: BN;\n  transientSeedSuffixEnd: BN;\n  lastUpdateEpoch: BN;\n}\n\nexport const ValidatorStakeInfoLayout = struct<ValidatorStakeInfo>([\n  /// Amount of active stake delegated to this validator\n  /// Note that if `last_update_epoch` does not match the current epoch then\n  /// this field may not be accurate\n  u64('activeStakeLamports'),\n  /// Amount of transient stake delegated to this validator\n  /// Note that if `last_update_epoch` does not match the current epoch then\n  /// this field may not be accurate\n  u64('transientStakeLamports'),\n  /// Last epoch the active and transient stake lamports fields were updated\n  u64('lastUpdateEpoch'),\n  /// Start of the validator transient account seed suffixes\n  u64('transientSeedSuffixStart'),\n  /// End of the validator transient account seed suffixes\n  u64('transientSeedSuffixEnd'),\n  /// Status of the validator stake account\n  u8('status'),\n  /// Validator vote account address\n  publicKey('voteAccountAddress'),\n]);\n\nexport interface ValidatorList {\n  /// Account type, must be ValidatorList currently\n  accountType: number;\n  /// Maximum allowable number of validators\n  maxValidators: number;\n  /// List of stake info for each validator in the pool\n  validators: ValidatorStakeInfo[];\n}\n\nexport const ValidatorListLayout = struct<ValidatorList>([\n  u8('accountType'),\n  u32('maxValidators'),\n  vec(ValidatorStakeInfoLayout, 'validators'),\n]);\n","import {\n  Connection,\n  Keypair,\n  PublicKey,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { findStakeProgramAddress, findTransientStakeProgramAddress } from './program-address';\nimport BN from 'bn.js';\n\nimport { lamportsToSol } from './math';\nimport { WithdrawAccount } from '../index';\nimport {\n  Fee,\n  StakePool,\n  ValidatorList,\n  ValidatorListLayout,\n  ValidatorStakeInfoStatus,\n} from '../layouts';\nimport { MINIMUM_ACTIVE_STAKE, STAKE_POOL_PROGRAM_ID } from '../constants';\n\nexport async function getValidatorListAccount(connection: Connection, pubkey: PublicKey) {\n  const account = await connection.getAccountInfo(pubkey);\n  if (!account) {\n    throw new Error('Invalid validator list account');\n  }\n\n  return {\n    pubkey,\n    account: {\n      data: ValidatorListLayout.decode(account?.data) as ValidatorList,\n      executable: account.executable,\n      lamports: account.lamports,\n      owner: account.owner,\n    },\n  };\n}\n\nexport interface ValidatorAccount {\n  type: 'preferred' | 'active' | 'transient' | 'reserve';\n  voteAddress?: PublicKey | undefined;\n  stakeAddress: PublicKey;\n  lamports: BN;\n}\n\nexport async function prepareWithdrawAccounts(\n  connection: Connection,\n  stakePool: StakePool,\n  stakePoolAddress: PublicKey,\n  amount: BN,\n  compareFn?: (a: ValidatorAccount, b: ValidatorAccount) => number,\n  skipFee?: boolean,\n): Promise<WithdrawAccount[]> {\n  const validatorListAcc = await connection.getAccountInfo(stakePool.validatorList);\n  const validatorList = ValidatorListLayout.decode(validatorListAcc?.data) as ValidatorList;\n\n  if (!validatorList?.validators || validatorList?.validators.length == 0) {\n    throw new Error('No accounts found');\n  }\n\n  const minBalanceForRentExemption = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n  const minBalance = new BN(minBalanceForRentExemption + MINIMUM_ACTIVE_STAKE);\n\n  let accounts = [] as Array<{\n    type: 'preferred' | 'active' | 'transient' | 'reserve';\n    voteAddress?: PublicKey | undefined;\n    stakeAddress: PublicKey;\n    lamports: BN;\n  }>;\n\n  // Prepare accounts\n  for (const validator of validatorList.validators) {\n    if (validator.status !== ValidatorStakeInfoStatus.Active) {\n      continue;\n    }\n\n    const stakeAccountAddress = await findStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      validator.voteAccountAddress,\n      stakePoolAddress,\n    );\n\n    if (!validator.activeStakeLamports.isZero()) {\n      const isPreferred = stakePool?.preferredWithdrawValidatorVoteAddress?.equals(\n        validator.voteAccountAddress,\n      );\n      accounts.push({\n        type: isPreferred ? 'preferred' : 'active',\n        voteAddress: validator.voteAccountAddress,\n        stakeAddress: stakeAccountAddress,\n        lamports: validator.activeStakeLamports,\n      });\n    }\n\n    const transientStakeLamports = validator.transientStakeLamports.sub(minBalance);\n    if (transientStakeLamports.gt(new BN(0))) {\n      const transientStakeAccountAddress = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      accounts.push({\n        type: 'transient',\n        voteAddress: validator.voteAccountAddress,\n        stakeAddress: transientStakeAccountAddress,\n        lamports: transientStakeLamports,\n      });\n    }\n  }\n\n  // Sort from highest to lowest balance\n  accounts = accounts.sort(compareFn ? compareFn : (a, b) => b.lamports.sub(a.lamports).toNumber());\n\n  const reserveStake = await connection.getAccountInfo(stakePool.reserveStake);\n  const reserveStakeBalance = new BN((reserveStake?.lamports ?? 0) - minBalanceForRentExemption);\n  if (reserveStakeBalance.gt(new BN(0))) {\n    accounts.push({\n      type: 'reserve',\n      stakeAddress: stakePool.reserveStake,\n      lamports: reserveStakeBalance,\n    });\n  }\n\n  // Prepare the list of accounts to withdraw from\n  const withdrawFrom: WithdrawAccount[] = [];\n  let remainingAmount = new BN(amount);\n\n  const fee = stakePool.stakeWithdrawalFee;\n  const inverseFee: Fee = {\n    numerator: fee.denominator.sub(fee.numerator),\n    denominator: fee.denominator,\n  };\n\n  for (const type of ['preferred', 'active', 'transient', 'reserve']) {\n    const filteredAccounts = accounts.filter((a) => a.type == type);\n\n    for (const { stakeAddress, voteAddress, lamports } of filteredAccounts) {\n      if (lamports.lte(minBalance) && type == 'transient') {\n        continue;\n      }\n\n      let availableForWithdrawal = calcPoolTokensForDeposit(stakePool, lamports);\n\n      if (!skipFee && !inverseFee.numerator.isZero()) {\n        availableForWithdrawal = availableForWithdrawal\n          .mul(inverseFee.denominator)\n          .div(inverseFee.numerator);\n      }\n\n      const poolAmount = BN.min(availableForWithdrawal, remainingAmount);\n      if (poolAmount.lte(new BN(0))) {\n        continue;\n      }\n\n      // Those accounts will be withdrawn completely with `claim` instruction\n      withdrawFrom.push({ stakeAddress, voteAddress, poolAmount });\n      remainingAmount = remainingAmount.sub(poolAmount);\n\n      if (remainingAmount.isZero()) {\n        break;\n      }\n    }\n\n    if (remainingAmount.isZero()) {\n      break;\n    }\n  }\n\n  // Not enough stake to withdraw the specified amount\n  if (remainingAmount.gt(new BN(0))) {\n    throw new Error(\n      `No stake accounts found in this pool with enough balance to withdraw ${lamportsToSol(\n        amount,\n      )} pool tokens.`,\n    );\n  }\n\n  return withdrawFrom;\n}\n\n/**\n * Calculate the pool tokens that should be minted for a deposit of `stakeLamports`\n */\nexport function calcPoolTokensForDeposit(stakePool: StakePool, stakeLamports: BN): BN {\n  if (stakePool.poolTokenSupply.isZero() || stakePool.totalLamports.isZero()) {\n    return stakeLamports;\n  }\n  const numerator = stakeLamports.mul(stakePool.poolTokenSupply);\n  return numerator.div(stakePool.totalLamports);\n}\n\n/**\n * Calculate lamports amount on withdrawal\n */\nexport function calcLamportsWithdrawAmount(stakePool: StakePool, poolTokens: BN): BN {\n  const numerator = poolTokens.mul(stakePool.totalLamports);\n  const denominator = stakePool.poolTokenSupply;\n  if (numerator.lt(denominator)) {\n    return new BN(0);\n  }\n  return numerator.div(denominator);\n}\n\nexport function newStakeAccount(\n  feePayer: PublicKey,\n  instructions: TransactionInstruction[],\n  lamports: number,\n): Keypair {\n  // Account for tokens not specified, creating one\n  const stakeReceiverKeypair = Keypair.generate();\n  console.log(`Creating account to receive stake ${stakeReceiverKeypair.publicKey}`);\n\n  instructions.push(\n    // Creating new account\n    SystemProgram.createAccount({\n      fromPubkey: feePayer,\n      newAccountPubkey: stakeReceiverKeypair.publicKey,\n      lamports,\n      space: StakeProgram.space,\n      programId: StakeProgram.programId,\n    }),\n  );\n\n  return stakeReceiverKeypair;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport { Buffer } from 'buffer';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<any>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength = type.layout.span;\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({ instruction: type.index }, fields);\n  type.layout.encode(layoutFields, data);\n\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","export * from './math';\nexport * from './program-address';\nexport * from './stake';\nexport * from './instruction';\n\nexport function arrayChunk(array: any[], size: number): any[] {\n  const result = [];\n  for (let i = 0; i < array.length; i += size) {\n    result.push(array.slice(i, i + size));\n  }\n  return result;\n}\n","import {\n  PublicKey,\n  STAKE_CONFIG_ID,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { InstructionType, encodeData, decodeData } from './utils';\nimport {\n  METADATA_MAX_NAME_LENGTH,\n  METADATA_MAX_SYMBOL_LENGTH,\n  METADATA_MAX_URI_LENGTH,\n  METADATA_PROGRAM_ID,\n  STAKE_POOL_PROGRAM_ID,\n} from './constants';\n\n/**\n * An enumeration of valid StakePoolInstructionType's\n */\nexport type StakePoolInstructionType =\n  | 'IncreaseValidatorStake'\n  | 'DecreaseValidatorStake'\n  | 'UpdateValidatorListBalance'\n  | 'UpdateStakePoolBalance'\n  | 'CleanupRemovedValidatorEntries'\n  | 'DepositStake'\n  | 'DepositSol'\n  | 'WithdrawStake'\n  | 'WithdrawSol'\n  | 'IncreaseAdditionalValidatorStake'\n  | 'DecreaseAdditionalValidatorStake'\n  | 'DecreaseValidatorStakeWithReserve'\n  | 'Redelegate'\n  | 'AddValidatorToPool'\n  | 'RemoveValidatorFromPool';\n\n// 'UpdateTokenMetadata' and 'CreateTokenMetadata' have dynamic layouts\n\nconst MOVE_STAKE_LAYOUT = BufferLayout.struct<any>([\n  BufferLayout.u8('instruction'),\n  BufferLayout.ns64('lamports'),\n  BufferLayout.ns64('transientStakeSeed'),\n]);\n\nconst UPDATE_VALIDATOR_LIST_BALANCE_LAYOUT = BufferLayout.struct<any>([\n  BufferLayout.u8('instruction'),\n  BufferLayout.u32('startIndex'),\n  BufferLayout.u8('noMerge'),\n]);\n\nexport function tokenMetadataLayout(\n  instruction: number,\n  nameLength: number,\n  symbolLength: number,\n  uriLength: number,\n) {\n  if (nameLength > METADATA_MAX_NAME_LENGTH) {\n    throw 'maximum token name length is 32 characters';\n  }\n\n  if (symbolLength > METADATA_MAX_SYMBOL_LENGTH) {\n    throw 'maximum token symbol length is 10 characters';\n  }\n\n  if (uriLength > METADATA_MAX_URI_LENGTH) {\n    throw 'maximum token uri length is 200 characters';\n  }\n\n  return {\n    index: instruction,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('nameLen'),\n      BufferLayout.blob(nameLength, 'name'),\n      BufferLayout.u32('symbolLen'),\n      BufferLayout.blob(symbolLength, 'symbol'),\n      BufferLayout.u32('uriLen'),\n      BufferLayout.blob(uriLength, 'uri'),\n    ]),\n  };\n}\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_POOL_INSTRUCTION_LAYOUTS: {\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n  [type in StakePoolInstructionType]: InstructionType;\n} = Object.freeze({\n  AddValidatorToPool: {\n    index: 1,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction'), BufferLayout.u32('seed')]),\n  },\n  RemoveValidatorFromPool: {\n    index: 2,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  DecreaseValidatorStake: {\n    index: 3,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  IncreaseValidatorStake: {\n    index: 4,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  UpdateValidatorListBalance: {\n    index: 6,\n    layout: UPDATE_VALIDATOR_LIST_BALANCE_LAYOUT,\n  },\n  UpdateStakePoolBalance: {\n    index: 7,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  CleanupRemovedValidatorEntries: {\n    index: 8,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  DepositStake: {\n    index: 9,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  /// Withdraw the token from the pool at the current ratio.\n  WithdrawStake: {\n    index: 10,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('poolTokens'),\n    ]),\n  },\n  /// Deposit SOL directly into the pool's reserve account. The output is a \"pool\" token\n  /// representing ownership into the pool. Inputs are converted to the current ratio.\n  DepositSol: {\n    index: 14,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  /// Withdraw SOL directly from the pool's reserve account. Fails if the\n  /// reserve does not have enough SOL.\n  WithdrawSol: {\n    index: 16,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('poolTokens'),\n    ]),\n  },\n  IncreaseAdditionalValidatorStake: {\n    index: 19,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('transientStakeSeed'),\n      BufferLayout.ns64('ephemeralStakeSeed'),\n    ]),\n  },\n  DecreaseAdditionalValidatorStake: {\n    index: 20,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('transientStakeSeed'),\n      BufferLayout.ns64('ephemeralStakeSeed'),\n    ]),\n  },\n  DecreaseValidatorStakeWithReserve: {\n    index: 21,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  Redelegate: {\n    index: 22,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n});\n\n/**\n * Cleans up validator stake account entries marked as `ReadyForRemoval`\n */\nexport type CleanupRemovedValidatorEntriesParams = {\n  stakePool: PublicKey;\n  programId: PublicKey;\n  validatorList: PublicKey;\n};\n\n/**\n * Updates balances of validator and transient stake accounts in the pool.\n */\nexport type UpdateValidatorListBalanceParams = {\n  stakePool: PublicKey;\n  programId: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  validatorAndTransientStakePairs: PublicKey[];\n  startIndex: number;\n  noMerge: boolean;\n};\n\n/**\n * Updates total pool balance based on balances in the reserve and validator list.\n */\nexport type UpdateStakePoolBalanceParams = {\n  stakePool: PublicKey;\n  programId: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n};\n\n/**\n * (Staker only) Decrease active stake on a validator, eventually moving it to the reserve\n */\nexport type DecreaseValidatorStakeParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  validatorStake: PublicKey;\n  transientStake: PublicKey;\n  // Amount of lamports to split into the transient stake account\n  lamports: number;\n  // Seed to used to create the transient stake account\n  transientStakeSeed: number;\n};\n\nexport interface DecreaseValidatorStakeWithReserveParams extends DecreaseValidatorStakeParams {\n  reserveStake: PublicKey;\n}\n\nexport interface DecreaseAdditionalValidatorStakeParams extends DecreaseValidatorStakeParams {\n  reserveStake: PublicKey;\n  ephemeralStake: PublicKey;\n  ephemeralStakeSeed: number;\n}\n\n/**\n * (Staker only) Increase stake on a validator from the reserve account.\n */\nexport type IncreaseValidatorStakeParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  transientStake: PublicKey;\n  validatorStake: PublicKey;\n  validatorVote: PublicKey;\n  // Amount of lamports to split into the transient stake account\n  lamports: number;\n  // Seed to used to create the transient stake account\n  transientStakeSeed: number;\n};\n\nexport interface IncreaseAdditionalValidatorStakeParams extends IncreaseValidatorStakeParams {\n  ephemeralStake: PublicKey;\n  ephemeralStakeSeed: number;\n}\n\n/**\n * Deposits a stake account into the pool in exchange for pool tokens\n */\nexport type DepositStakeParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n  depositAuthority: PublicKey;\n  withdrawAuthority: PublicKey;\n  depositStake: PublicKey;\n  validatorStake: PublicKey;\n  reserveStake: PublicKey;\n  destinationPoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  referralPoolAccount: PublicKey;\n  poolMint: PublicKey;\n};\n\n/**\n * Withdraws a stake account from the pool in exchange for pool tokens\n */\nexport type WithdrawStakeParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorStake: PublicKey;\n  destinationStake: PublicKey;\n  destinationStakeAuthority: PublicKey;\n  sourceTransferAuthority: PublicKey;\n  sourcePoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n  poolTokens: number;\n};\n\n/**\n * Withdraw sol instruction params\n */\nexport type WithdrawSolParams = {\n  stakePool: PublicKey;\n  sourcePoolAccount: PublicKey;\n  withdrawAuthority: PublicKey;\n  reserveStake: PublicKey;\n  destinationSystemAccount: PublicKey;\n  sourceTransferAuthority: PublicKey;\n  solWithdrawAuthority?: PublicKey | undefined;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n  poolTokens: number;\n};\n\n/**\n * Deposit SOL directly into the pool's reserve account. The output is a \"pool\" token\n * representing ownership into the pool. Inputs are converted to the current ratio.\n */\nexport type DepositSolParams = {\n  stakePool: PublicKey;\n  depositAuthority?: PublicKey | undefined;\n  withdrawAuthority: PublicKey;\n  reserveStake: PublicKey;\n  fundingAccount: PublicKey;\n  destinationPoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  referralPoolAccount: PublicKey;\n  poolMint: PublicKey;\n  lamports: number;\n};\n\nexport type CreateTokenMetadataParams = {\n  stakePool: PublicKey;\n  manager: PublicKey;\n  tokenMetadata: PublicKey;\n  withdrawAuthority: PublicKey;\n  poolMint: PublicKey;\n  payer: PublicKey;\n  name: string;\n  symbol: string;\n  uri: string;\n};\n\nexport type UpdateTokenMetadataParams = {\n  stakePool: PublicKey;\n  manager: PublicKey;\n  tokenMetadata: PublicKey;\n  withdrawAuthority: PublicKey;\n  name: string;\n  symbol: string;\n  uri: string;\n};\n\nexport type AddValidatorToPoolParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  reserveStake: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  validatorStake: PublicKey;\n  validatorVote: PublicKey;\n  seed?: number;\n};\n\nexport type RemoveValidatorFromPoolParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  validatorStake: PublicKey;\n  transientStake: PublicKey;\n};\n\n/**\n * Stake Pool Instruction class\n */\nexport class StakePoolInstruction {\n  /**\n   * Creates instruction to add a validator into the stake pool.\n   */\n  static addValidatorToPool(params: AddValidatorToPoolParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      reserveStake,\n      withdrawAuthority,\n      validatorList,\n      validatorStake,\n      validatorVote,\n      seed,\n    } = params;\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.AddValidatorToPool;\n    const data = encodeData(type, { seed: seed == undefined ? 0 : seed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: validatorVote, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to remove a validator from the stake pool.\n   */\n  static removeValidatorFromPool(params: RemoveValidatorFromPoolParams): TransactionInstruction {\n    const { stakePool, staker, withdrawAuthority, validatorList, validatorStake, transientStake } =\n      params;\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.RemoveValidatorFromPool;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to update a set of validators in the stake pool.\n   */\n  static updateValidatorListBalance(\n    params: UpdateValidatorListBalanceParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      programId,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      startIndex,\n      noMerge,\n      validatorAndTransientStakePairs,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.UpdateValidatorListBalance;\n    const data = encodeData(type, { startIndex, noMerge: noMerge ? 1 : 0 });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n      ...validatorAndTransientStakePairs.map((pubkey) => ({\n        pubkey,\n        isSigner: false,\n        isWritable: true,\n      })),\n    ];\n\n    return new TransactionInstruction({\n      programId,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to update the overall stake pool balance.\n   */\n  static updateStakePoolBalance(params: UpdateStakePoolBalanceParams): TransactionInstruction {\n    const {\n      stakePool,\n      programId,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      managerFeeAccount,\n      poolMint,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.UpdateStakePoolBalance;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: false },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to cleanup removed validator entries.\n   */\n  static cleanupRemovedValidatorEntries(\n    params: CleanupRemovedValidatorEntriesParams,\n  ): TransactionInstruction {\n    const { stakePool, programId, validatorList } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.CleanupRemovedValidatorEntries;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n    ];\n\n    return new TransactionInstruction({\n      programId,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `IncreaseValidatorStake` instruction (rebalance from reserve account to\n   * transient account)\n   */\n  static increaseValidatorStake(params: IncreaseValidatorStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      transientStake,\n      validatorStake,\n      validatorVote,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.IncreaseValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: false },\n      { pubkey: validatorVote, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `IncreaseAdditionalValidatorStake` instruction (rebalance from reserve account to\n   * transient account)\n   */\n  static increaseAdditionalValidatorStake(\n    params: IncreaseAdditionalValidatorStakeParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      transientStake,\n      validatorStake,\n      validatorVote,\n      lamports,\n      transientStakeSeed,\n      ephemeralStake,\n      ephemeralStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.IncreaseAdditionalValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed, ephemeralStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: ephemeralStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: false },\n      { pubkey: validatorVote, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `DecreaseValidatorStake` instruction (rebalance from validator account to\n   * transient account)\n   */\n  static decreaseValidatorStake(params: DecreaseValidatorStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      validatorStake,\n      transientStake,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DecreaseValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `DecreaseValidatorStakeWithReserve` instruction (rebalance from\n   * validator account to transient account)\n   */\n  static decreaseValidatorStakeWithReserve(\n    params: DecreaseValidatorStakeWithReserveParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      validatorStake,\n      transientStake,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DecreaseValidatorStakeWithReserve;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `DecreaseAdditionalValidatorStake` instruction (rebalance from\n   * validator account to transient account)\n   */\n  static decreaseAdditionalValidatorStake(\n    params: DecreaseAdditionalValidatorStakeParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      validatorStake,\n      transientStake,\n      lamports,\n      transientStakeSeed,\n      ephemeralStakeSeed,\n      ephemeralStake,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DecreaseAdditionalValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed, ephemeralStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: ephemeralStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to deposit a stake account into a stake pool.\n   */\n  static depositStake(params: DepositStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      validatorList,\n      depositAuthority,\n      withdrawAuthority,\n      depositStake,\n      validatorStake,\n      reserveStake,\n      destinationPoolAccount,\n      managerFeeAccount,\n      referralPoolAccount,\n      poolMint,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DepositStake;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: depositAuthority, isSigner: false, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: depositStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: destinationPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: referralPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to deposit SOL into a stake pool.\n   */\n  static depositSol(params: DepositSolParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      depositAuthority,\n      reserveStake,\n      fundingAccount,\n      destinationPoolAccount,\n      managerFeeAccount,\n      referralPoolAccount,\n      poolMint,\n      lamports,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DepositSol;\n    const data = encodeData(type, { lamports });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: fundingAccount, isSigner: true, isWritable: true },\n      { pubkey: destinationPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: referralPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    if (depositAuthority) {\n      keys.push({\n        pubkey: depositAuthority,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to withdraw active stake from a stake pool.\n   */\n  static withdrawStake(params: WithdrawStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      validatorList,\n      withdrawAuthority,\n      validatorStake,\n      destinationStake,\n      destinationStakeAuthority,\n      sourceTransferAuthority,\n      sourcePoolAccount,\n      managerFeeAccount,\n      poolMint,\n      poolTokens,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.WithdrawStake;\n    const data = encodeData(type, { poolTokens });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: destinationStake, isSigner: false, isWritable: true },\n      { pubkey: destinationStakeAuthority, isSigner: false, isWritable: false },\n      { pubkey: sourceTransferAuthority, isSigner: true, isWritable: false },\n      { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to withdraw SOL from a stake pool.\n   */\n  static withdrawSol(params: WithdrawSolParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      sourceTransferAuthority,\n      sourcePoolAccount,\n      reserveStake,\n      destinationSystemAccount,\n      managerFeeAccount,\n      solWithdrawAuthority,\n      poolMint,\n      poolTokens,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.WithdrawSol;\n    const data = encodeData(type, { poolTokens });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: sourceTransferAuthority, isSigner: true, isWritable: false },\n      { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: destinationSystemAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    if (solWithdrawAuthority) {\n      keys.push({\n        pubkey: solWithdrawAuthority,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates an instruction to create metadata\n   * using the mpl token metadata program for the pool token\n   */\n  static createTokenMetadata(params: CreateTokenMetadataParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      tokenMetadata,\n      manager,\n      payer,\n      poolMint,\n      name,\n      symbol,\n      uri,\n    } = params;\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: manager, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: poolMint, isSigner: false, isWritable: false },\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: tokenMetadata, isSigner: false, isWritable: true },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const type = tokenMetadataLayout(17, name.length, symbol.length, uri.length);\n    const data = encodeData(type, {\n      nameLen: name.length,\n      name: Buffer.from(name),\n      symbolLen: symbol.length,\n      symbol: Buffer.from(symbol),\n      uriLen: uri.length,\n      uri: Buffer.from(uri),\n    });\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates an instruction to update metadata\n   * in the mpl token metadata program account for the pool token\n   */\n  static updateTokenMetadata(params: UpdateTokenMetadataParams): TransactionInstruction {\n    const { stakePool, withdrawAuthority, tokenMetadata, manager, name, symbol, uri } = params;\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: manager, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: tokenMetadata, isSigner: false, isWritable: true },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const type = tokenMetadataLayout(18, name.length, symbol.length, uri.length);\n    const data = encodeData(type, {\n      nameLen: name.length,\n      name: Buffer.from(name),\n      symbolLen: symbol.length,\n      symbol: Buffer.from(symbol),\n      uriLen: uri.length,\n      uri: Buffer.from(uri),\n    });\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Decode a deposit stake pool instruction and retrieve the instruction params.\n   */\n  static decodeDepositStake(instruction: TransactionInstruction): DepositStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 11);\n\n    decodeData(STAKE_POOL_INSTRUCTION_LAYOUTS.DepositStake, instruction.data);\n\n    return {\n      stakePool: instruction.keys[0].pubkey,\n      validatorList: instruction.keys[1].pubkey,\n      depositAuthority: instruction.keys[2].pubkey,\n      withdrawAuthority: instruction.keys[3].pubkey,\n      depositStake: instruction.keys[4].pubkey,\n      validatorStake: instruction.keys[5].pubkey,\n      reserveStake: instruction.keys[6].pubkey,\n      destinationPoolAccount: instruction.keys[7].pubkey,\n      managerFeeAccount: instruction.keys[8].pubkey,\n      referralPoolAccount: instruction.keys[9].pubkey,\n      poolMint: instruction.keys[10].pubkey,\n    };\n  }\n\n  /**\n   * Decode a deposit sol instruction and retrieve the instruction params.\n   */\n  static decodeDepositSol(instruction: TransactionInstruction): DepositSolParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 9);\n\n    const { amount } = decodeData(STAKE_POOL_INSTRUCTION_LAYOUTS.DepositSol, instruction.data);\n\n    return {\n      stakePool: instruction.keys[0].pubkey,\n      depositAuthority: instruction.keys[1].pubkey,\n      withdrawAuthority: instruction.keys[2].pubkey,\n      reserveStake: instruction.keys[3].pubkey,\n      fundingAccount: instruction.keys[4].pubkey,\n      destinationPoolAccount: instruction.keys[5].pubkey,\n      managerFeeAccount: instruction.keys[6].pubkey,\n      referralPoolAccount: instruction.keys[7].pubkey,\n      poolMint: instruction.keys[8].pubkey,\n      lamports: amount,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  private static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('Invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `Invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n","import {\n  AccountInfo,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  StakeAuthorizationLayout,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport {\n  createApproveInstruction,\n  createAssociatedTokenAccountIdempotentInstruction,\n  getAccount,\n  getAssociatedTokenAddressSync,\n} from '@solana/spl-token';\nimport {\n  ValidatorAccount,\n  arrayChunk,\n  calcLamportsWithdrawAmount,\n  findStakeProgramAddress,\n  findTransientStakeProgramAddress,\n  findWithdrawAuthorityProgramAddress,\n  getValidatorListAccount,\n  newStakeAccount,\n  prepareWithdrawAccounts,\n  lamportsToSol,\n  solToLamports,\n  findEphemeralStakeProgramAddress,\n  findMetadataAddress,\n} from './utils';\nimport { StakePoolInstruction } from './instructions';\nimport {\n  StakeAccount,\n  StakePool,\n  StakePoolLayout,\n  ValidatorList,\n  ValidatorListLayout,\n  ValidatorStakeInfo,\n} from './layouts';\nimport { MAX_VALIDATORS_TO_UPDATE, MINIMUM_ACTIVE_STAKE, STAKE_POOL_PROGRAM_ID } from './constants';\nimport { create } from 'superstruct';\nimport BN from 'bn.js';\n\nexport type { StakePool, AccountType, ValidatorList, ValidatorStakeInfo } from './layouts';\nexport { STAKE_POOL_PROGRAM_ID } from './constants';\nexport * from './instructions';\nexport { StakePoolLayout, ValidatorListLayout, ValidatorStakeInfoLayout } from './layouts';\n\nexport interface ValidatorListAccount {\n  pubkey: PublicKey;\n  account: AccountInfo<ValidatorList>;\n}\n\nexport interface StakePoolAccount {\n  pubkey: PublicKey;\n  account: AccountInfo<StakePool>;\n}\n\nexport interface WithdrawAccount {\n  stakeAddress: PublicKey;\n  voteAddress?: PublicKey;\n  poolAmount: BN;\n}\n\n/**\n * Wrapper class for a stake pool.\n * Each stake pool has a stake pool account and a validator list account.\n */\nexport interface StakePoolAccounts {\n  stakePool: StakePoolAccount | undefined;\n  validatorList: ValidatorListAccount | undefined;\n}\n\n/**\n * Retrieves and deserializes a StakePool account using a web3js connection and the stake pool address.\n * @param connection: An active web3js connection.\n * @param stakePoolAddress: The public key (address) of the stake pool account.\n */\nexport async function getStakePoolAccount(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n): Promise<StakePoolAccount> {\n  const account = await connection.getAccountInfo(stakePoolAddress);\n\n  if (!account) {\n    throw new Error('Invalid stake pool account');\n  }\n\n  return {\n    pubkey: stakePoolAddress,\n    account: {\n      data: StakePoolLayout.decode(account.data),\n      executable: account.executable,\n      lamports: account.lamports,\n      owner: account.owner,\n    },\n  };\n}\n\n/**\n * Retrieves and deserializes a Stake account using a web3js connection and the stake address.\n * @param connection: An active web3js connection.\n * @param stakeAccount: The public key (address) of the stake account.\n */\nexport async function getStakeAccount(\n  connection: Connection,\n  stakeAccount: PublicKey,\n): Promise<StakeAccount> {\n  const result = (await connection.getParsedAccountInfo(stakeAccount)).value;\n  if (!result || !('parsed' in result.data)) {\n    throw new Error('Invalid stake account');\n  }\n  const program = result.data.program;\n  if (program != 'stake') {\n    throw new Error('Not a stake account');\n  }\n  const parsed = create(result.data.parsed, StakeAccount);\n\n  return parsed;\n}\n\n/**\n * Retrieves all StakePool and ValidatorList accounts that are running a particular StakePool program.\n * @param connection: An active web3js connection.\n * @param stakePoolProgramAddress: The public key (address) of the StakePool program.\n */\nexport async function getStakePoolAccounts(\n  connection: Connection,\n  stakePoolProgramAddress: PublicKey,\n): Promise<(StakePoolAccount | ValidatorListAccount | undefined)[] | undefined> {\n  const response = await connection.getProgramAccounts(stakePoolProgramAddress);\n\n  return response\n    .map((a) => {\n      try {\n        if (a.account.data.readUInt8() === 1) {\n          const data = StakePoolLayout.decode(a.account.data);\n          return {\n            pubkey: a.pubkey,\n            account: {\n              data,\n              executable: a.account.executable,\n              lamports: a.account.lamports,\n              owner: a.account.owner,\n            },\n          };\n        } else if (a.account.data.readUInt8() === 2) {\n          const data = ValidatorListLayout.decode(a.account.data);\n          return {\n            pubkey: a.pubkey,\n            account: {\n              data,\n              executable: a.account.executable,\n              lamports: a.account.lamports,\n              owner: a.account.owner,\n            },\n          };\n        } else {\n          console.error(\n            `Could not decode. StakePoolAccount Enum is ${a.account.data.readUInt8()}, expected 1 or 2!`,\n          );\n          return undefined;\n        }\n      } catch (error) {\n        console.error('Could not decode account. Error:', error);\n        return undefined;\n      }\n    })\n    .filter((a) => a !== undefined);\n}\n\n/**\n * Creates instructions required to deposit stake to stake pool.\n */\nexport async function depositStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  authorizedPubkey: PublicKey,\n  validatorVote: PublicKey,\n  depositStake: PublicKey,\n  poolTokenReceiverAccount?: PublicKey,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorVote,\n    stakePoolAddress,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Signer[] = [];\n\n  const poolMint = stakePool.account.data.poolMint;\n\n  // Create token account if not specified\n  if (!poolTokenReceiverAccount) {\n    const associatedAddress = getAssociatedTokenAddressSync(poolMint, authorizedPubkey);\n    instructions.push(\n      createAssociatedTokenAccountIdempotentInstruction(\n        authorizedPubkey,\n        associatedAddress,\n        authorizedPubkey,\n        poolMint,\n      ),\n    );\n    poolTokenReceiverAccount = associatedAddress;\n  }\n\n  instructions.push(\n    ...StakeProgram.authorize({\n      stakePubkey: depositStake,\n      authorizedPubkey,\n      newAuthorizedPubkey: stakePool.account.data.stakeDepositAuthority,\n      stakeAuthorizationType: StakeAuthorizationLayout.Staker,\n    }).instructions,\n  );\n\n  instructions.push(\n    ...StakeProgram.authorize({\n      stakePubkey: depositStake,\n      authorizedPubkey,\n      newAuthorizedPubkey: stakePool.account.data.stakeDepositAuthority,\n      stakeAuthorizationType: StakeAuthorizationLayout.Withdrawer,\n    }).instructions,\n  );\n\n  instructions.push(\n    StakePoolInstruction.depositStake({\n      stakePool: stakePoolAddress,\n      validatorList: stakePool.account.data.validatorList,\n      depositAuthority: stakePool.account.data.stakeDepositAuthority,\n      reserveStake: stakePool.account.data.reserveStake,\n      managerFeeAccount: stakePool.account.data.managerFeeAccount,\n      referralPoolAccount: poolTokenReceiverAccount,\n      destinationPoolAccount: poolTokenReceiverAccount,\n      withdrawAuthority,\n      depositStake,\n      validatorStake,\n      poolMint,\n    }),\n  );\n\n  return {\n    instructions,\n    signers,\n  };\n}\n\n/**\n * Creates instructions required to deposit sol to stake pool.\n */\nexport async function depositSol(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  from: PublicKey,\n  lamports: number,\n  destinationTokenAccount?: PublicKey,\n  referrerTokenAccount?: PublicKey,\n  depositAuthority?: PublicKey,\n) {\n  const fromBalance = await connection.getBalance(from, 'confirmed');\n  if (fromBalance < lamports) {\n    throw new Error(\n      `Not enough SOL to deposit into pool. Maximum deposit amount is ${lamportsToSol(\n        fromBalance,\n      )} SOL.`,\n    );\n  }\n\n  const stakePoolAccount = await getStakePoolAccount(connection, stakePoolAddress);\n  const stakePool = stakePoolAccount.account.data;\n\n  // Ephemeral SOL account just to do the transfer\n  const userSolTransfer = new Keypair();\n  const signers: Signer[] = [userSolTransfer];\n  const instructions: TransactionInstruction[] = [];\n\n  // Create the ephemeral SOL account\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: from,\n      toPubkey: userSolTransfer.publicKey,\n      lamports,\n    }),\n  );\n\n  // Create token account if not specified\n  if (!destinationTokenAccount) {\n    const associatedAddress = getAssociatedTokenAddressSync(stakePool.poolMint, from);\n    instructions.push(\n      createAssociatedTokenAccountIdempotentInstruction(\n        from,\n        associatedAddress,\n        from,\n        stakePool.poolMint,\n      ),\n    );\n    destinationTokenAccount = associatedAddress;\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  instructions.push(\n    StakePoolInstruction.depositSol({\n      stakePool: stakePoolAddress,\n      reserveStake: stakePool.reserveStake,\n      fundingAccount: userSolTransfer.publicKey,\n      destinationPoolAccount: destinationTokenAccount,\n      managerFeeAccount: stakePool.managerFeeAccount,\n      referralPoolAccount: referrerTokenAccount ?? destinationTokenAccount,\n      poolMint: stakePool.poolMint,\n      lamports,\n      withdrawAuthority,\n      depositAuthority,\n    }),\n  );\n\n  return {\n    instructions,\n    signers,\n  };\n}\n\n/**\n * Creates instructions required to withdraw stake from a stake pool.\n */\nexport async function withdrawStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  tokenOwner: PublicKey,\n  amount: number,\n  useReserve = false,\n  voteAccountAddress?: PublicKey,\n  stakeReceiver?: PublicKey,\n  poolTokenAccount?: PublicKey,\n  validatorComparator?: (_a: ValidatorAccount, _b: ValidatorAccount) => number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const poolAmount = new BN(solToLamports(amount));\n\n  if (!poolTokenAccount) {\n    poolTokenAccount = getAssociatedTokenAddressSync(stakePool.account.data.poolMint, tokenOwner);\n  }\n\n  const tokenAccount = await getAccount(connection, poolTokenAccount);\n\n  // Check withdrawFrom balance\n  if (tokenAccount.amount < poolAmount.toNumber()) {\n    throw new Error(\n      `Not enough token balance to withdraw ${lamportsToSol(poolAmount)} pool tokens.\n        Maximum withdraw amount is ${lamportsToSol(tokenAccount.amount)} pool tokens.`,\n    );\n  }\n\n  const stakeAccountRentExemption = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  let stakeReceiverAccount = null;\n  if (stakeReceiver) {\n    stakeReceiverAccount = await getStakeAccount(connection, stakeReceiver);\n  }\n\n  const withdrawAccounts: WithdrawAccount[] = [];\n\n  if (useReserve) {\n    withdrawAccounts.push({\n      stakeAddress: stakePool.account.data.reserveStake,\n      voteAddress: undefined,\n      poolAmount,\n    });\n  } else if (stakeReceiverAccount && stakeReceiverAccount?.type == 'delegated') {\n    const voteAccount = stakeReceiverAccount.info?.stake?.delegation.voter;\n    if (!voteAccount) throw new Error(`Invalid stake receiver ${stakeReceiver} delegation`);\n    const validatorListAccount = await connection.getAccountInfo(\n      stakePool.account.data.validatorList,\n    );\n    const validatorList = ValidatorListLayout.decode(validatorListAccount?.data) as ValidatorList;\n    const isValidVoter = validatorList.validators.find((val) =>\n      val.voteAccountAddress.equals(voteAccount),\n    );\n    if (voteAccountAddress && voteAccountAddress !== voteAccount) {\n      throw new Error(`Provided withdrawal vote account ${voteAccountAddress} does not match delegation on stake receiver account ${voteAccount},\n      remove this flag or provide a different stake account delegated to ${voteAccountAddress}`);\n    }\n    if (isValidVoter) {\n      const stakeAccountAddress = await findStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        voteAccount,\n        stakePoolAddress,\n      );\n\n      const stakeAccount = await connection.getAccountInfo(stakeAccountAddress);\n      if (!stakeAccount) {\n        throw new Error(`Preferred withdraw valdator's stake account is invalid`);\n      }\n\n      const availableForWithdrawal = calcLamportsWithdrawAmount(\n        stakePool.account.data,\n        new BN(stakeAccount.lamports - MINIMUM_ACTIVE_STAKE - stakeAccountRentExemption),\n      );\n\n      if (availableForWithdrawal.lt(poolAmount)) {\n        throw new Error(\n          `Not enough lamports available for withdrawal from ${stakeAccountAddress},\n            ${poolAmount} asked, ${availableForWithdrawal} available.`,\n        );\n      }\n      withdrawAccounts.push({\n        stakeAddress: stakeAccountAddress,\n        voteAddress: voteAccount,\n        poolAmount,\n      });\n    } else {\n      throw new Error(\n        `Provided stake account is delegated to a vote account ${voteAccount} which does not exist in the stake pool`,\n      );\n    }\n  } else if (voteAccountAddress) {\n    const stakeAccountAddress = await findStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      voteAccountAddress,\n      stakePoolAddress,\n    );\n    const stakeAccount = await connection.getAccountInfo(stakeAccountAddress);\n    if (!stakeAccount) {\n      throw new Error('Invalid Stake Account');\n    }\n\n    const availableLamports = new BN(\n      stakeAccount.lamports - MINIMUM_ACTIVE_STAKE - stakeAccountRentExemption,\n    );\n    if (availableLamports.lt(new BN(0))) {\n      throw new Error('Invalid Stake Account');\n    }\n    const availableForWithdrawal = calcLamportsWithdrawAmount(\n      stakePool.account.data,\n      availableLamports,\n    );\n\n    if (availableForWithdrawal.lt(poolAmount)) {\n      // noinspection ExceptionCaughtLocallyJS\n      throw new Error(\n        `Not enough lamports available for withdrawal from ${stakeAccountAddress},\n          ${poolAmount} asked, ${availableForWithdrawal} available.`,\n      );\n    }\n    withdrawAccounts.push({\n      stakeAddress: stakeAccountAddress,\n      voteAddress: voteAccountAddress,\n      poolAmount,\n    });\n  } else {\n    // Get the list of accounts to withdraw from\n    withdrawAccounts.push(\n      ...(await prepareWithdrawAccounts(\n        connection,\n        stakePool.account.data,\n        stakePoolAddress,\n        poolAmount,\n        validatorComparator,\n        poolTokenAccount.equals(stakePool.account.data.managerFeeAccount),\n      )),\n    );\n  }\n\n  // Construct transaction to withdraw from withdrawAccounts account list\n  const instructions: TransactionInstruction[] = [];\n  const userTransferAuthority = Keypair.generate();\n\n  const signers: Signer[] = [userTransferAuthority];\n\n  instructions.push(\n    createApproveInstruction(\n      poolTokenAccount,\n      userTransferAuthority.publicKey,\n      tokenOwner,\n      poolAmount.toNumber(),\n    ),\n  );\n\n  let totalRentFreeBalances = 0;\n\n  // Max 5 accounts to prevent an error: \"Transaction too large\"\n  const maxWithdrawAccounts = 5;\n  let i = 0;\n\n  // Go through prepared accounts and withdraw/claim them\n  for (const withdrawAccount of withdrawAccounts) {\n    if (i > maxWithdrawAccounts) {\n      break;\n    }\n    // Convert pool tokens amount to lamports\n    const solWithdrawAmount = calcLamportsWithdrawAmount(\n      stakePool.account.data,\n      withdrawAccount.poolAmount,\n    );\n\n    let infoMsg = `Withdrawing ◎${solWithdrawAmount},\n      from stake account ${withdrawAccount.stakeAddress?.toBase58()}`;\n\n    if (withdrawAccount.voteAddress) {\n      infoMsg = `${infoMsg}, delegated to ${withdrawAccount.voteAddress?.toBase58()}`;\n    }\n\n    console.info(infoMsg);\n    let stakeToReceive;\n\n    if (!stakeReceiver || (stakeReceiverAccount && stakeReceiverAccount.type === 'delegated')) {\n      const stakeKeypair = newStakeAccount(tokenOwner, instructions, stakeAccountRentExemption);\n      signers.push(stakeKeypair);\n      totalRentFreeBalances += stakeAccountRentExemption;\n      stakeToReceive = stakeKeypair.publicKey;\n    } else {\n      stakeToReceive = stakeReceiver;\n    }\n\n    instructions.push(\n      StakePoolInstruction.withdrawStake({\n        stakePool: stakePoolAddress,\n        validatorList: stakePool.account.data.validatorList,\n        validatorStake: withdrawAccount.stakeAddress,\n        destinationStake: stakeToReceive,\n        destinationStakeAuthority: tokenOwner,\n        sourceTransferAuthority: userTransferAuthority.publicKey,\n        sourcePoolAccount: poolTokenAccount,\n        managerFeeAccount: stakePool.account.data.managerFeeAccount,\n        poolMint: stakePool.account.data.poolMint,\n        poolTokens: withdrawAccount.poolAmount.toNumber(),\n        withdrawAuthority,\n      }),\n    );\n    i++;\n  }\n  if (stakeReceiver && stakeReceiverAccount && stakeReceiverAccount.type === 'delegated') {\n    signers.forEach((newStakeKeypair) => {\n      instructions.concat(\n        StakeProgram.merge({\n          stakePubkey: stakeReceiver,\n          sourceStakePubKey: newStakeKeypair.publicKey,\n          authorizedPubkey: tokenOwner,\n        }).instructions,\n      );\n    });\n  }\n\n  return {\n    instructions,\n    signers,\n    stakeReceiver,\n    totalRentFreeBalances,\n  };\n}\n\n/**\n * Creates instructions required to withdraw SOL directly from a stake pool.\n */\nexport async function withdrawSol(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  tokenOwner: PublicKey,\n  solReceiver: PublicKey,\n  amount: number,\n  solWithdrawAuthority?: PublicKey,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const poolAmount = solToLamports(amount);\n\n  const poolTokenAccount = getAssociatedTokenAddressSync(\n    stakePool.account.data.poolMint,\n    tokenOwner,\n  );\n\n  const tokenAccount = await getAccount(connection, poolTokenAccount);\n\n  // Check withdrawFrom balance\n  if (tokenAccount.amount < poolAmount) {\n    throw new Error(\n      `Not enough token balance to withdraw ${lamportsToSol(poolAmount)} pool tokens.\n          Maximum withdraw amount is ${lamportsToSol(tokenAccount.amount)} pool tokens.`,\n    );\n  }\n\n  // Construct transaction to withdraw from withdrawAccounts account list\n  const instructions: TransactionInstruction[] = [];\n  const userTransferAuthority = Keypair.generate();\n  const signers: Signer[] = [userTransferAuthority];\n\n  instructions.push(\n    createApproveInstruction(\n      poolTokenAccount,\n      userTransferAuthority.publicKey,\n      tokenOwner,\n      poolAmount,\n    ),\n  );\n\n  const poolWithdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  if (solWithdrawAuthority) {\n    const expectedSolWithdrawAuthority = stakePool.account.data.solWithdrawAuthority;\n    if (!expectedSolWithdrawAuthority) {\n      throw new Error('SOL withdraw authority specified in arguments but stake pool has none');\n    }\n    if (solWithdrawAuthority.toBase58() != expectedSolWithdrawAuthority.toBase58()) {\n      throw new Error(\n        `Invalid deposit withdraw specified, expected ${expectedSolWithdrawAuthority.toBase58()}, received ${solWithdrawAuthority.toBase58()}`,\n      );\n    }\n  }\n\n  const withdrawTransaction = StakePoolInstruction.withdrawSol({\n    stakePool: stakePoolAddress,\n    withdrawAuthority: poolWithdrawAuthority,\n    reserveStake: stakePool.account.data.reserveStake,\n    sourcePoolAccount: poolTokenAccount,\n    sourceTransferAuthority: userTransferAuthority.publicKey,\n    destinationSystemAccount: solReceiver,\n    managerFeeAccount: stakePool.account.data.managerFeeAccount,\n    poolMint: stakePool.account.data.poolMint,\n    poolTokens: poolAmount,\n    solWithdrawAuthority,\n  });\n\n  instructions.push(withdrawTransaction);\n\n  return {\n    instructions,\n    signers,\n  };\n}\n\nexport async function addValidatorToPool(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  seed?: number,\n) {\n  const stakePoolAccount = await getStakePoolAccount(connection, stakePoolAddress);\n  const stakePool = stakePoolAccount.account.data;\n  const { reserveStake, staker, validatorList } = stakePool;\n\n  const validatorListAccount = await getValidatorListAccount(connection, validatorList);\n\n  const validatorInfo = validatorListAccount.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (validatorInfo) {\n    throw new Error('Vote account is already in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorVote,\n    stakePoolAddress,\n    seed,\n  );\n\n  const instructions: TransactionInstruction[] = [\n    StakePoolInstruction.addValidatorToPool({\n      stakePool: stakePoolAddress,\n      staker: staker,\n      reserveStake: reserveStake,\n      withdrawAuthority: withdrawAuthority,\n      validatorList: validatorList,\n      validatorStake: validatorStake,\n      validatorVote: validatorVote,\n    }),\n  ];\n\n  return {\n    instructions,\n  };\n}\n\nexport async function removeValidatorFromPool(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  seed?: number,\n) {\n  const stakePoolAccount = await getStakePoolAccount(connection, stakePoolAddress);\n  const stakePool = stakePoolAccount.account.data;\n  const { staker, validatorList } = stakePool;\n\n  const validatorListAccount = await getValidatorListAccount(connection, validatorList);\n\n  const validatorInfo = validatorListAccount.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (!validatorInfo) {\n    throw new Error('Vote account is not already in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorVote,\n    stakePoolAddress,\n    seed,\n  );\n\n  const transientStakeSeed = validatorInfo.transientSeedSuffixStart;\n\n  const transientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n    transientStakeSeed,\n  );\n\n  const instructions: TransactionInstruction[] = [\n    StakePoolInstruction.removeValidatorFromPool({\n      stakePool: stakePoolAddress,\n      staker: staker,\n      withdrawAuthority,\n      validatorList,\n      validatorStake,\n      transientStake,\n    }),\n  ];\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to increase validator stake.\n */\nexport async function increaseValidatorStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  lamports: number,\n  ephemeralStakeSeed?: number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const validatorInfo = validatorList.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (!validatorInfo) {\n    throw new Error('Vote account not found in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  // Bump transient seed suffix by one to avoid reuse when not using the increaseAdditionalStake instruction\n  const transientStakeSeed =\n    ephemeralStakeSeed == undefined\n      ? validatorInfo.transientSeedSuffixStart.addn(1)\n      : validatorInfo.transientSeedSuffixStart;\n\n  const transientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n    transientStakeSeed,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n\n  if (ephemeralStakeSeed != undefined) {\n    const ephemeralStake = await findEphemeralStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      stakePoolAddress,\n      new BN(ephemeralStakeSeed),\n    );\n    instructions.push(\n      StakePoolInstruction.increaseAdditionalValidatorStake({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        transientStake,\n        validatorStake,\n        validatorVote,\n        lamports,\n        ephemeralStake,\n        ephemeralStakeSeed,\n      }),\n    );\n  } else {\n    instructions.push(\n      StakePoolInstruction.increaseValidatorStake({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        transientStake,\n        validatorStake,\n        validatorVote,\n        lamports,\n      }),\n    );\n  }\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to decrease validator stake.\n */\nexport async function decreaseValidatorStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  lamports: number,\n  ephemeralStakeSeed?: number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const validatorInfo = validatorList.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (!validatorInfo) {\n    throw new Error('Vote account not found in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n  );\n\n  // Bump transient seed suffix by one to avoid reuse when not using the decreaseAdditionalStake instruction\n  const transientStakeSeed =\n    ephemeralStakeSeed == undefined\n      ? validatorInfo.transientSeedSuffixStart.addn(1)\n      : validatorInfo.transientSeedSuffixStart;\n\n  const transientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n    transientStakeSeed,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n\n  if (ephemeralStakeSeed != undefined) {\n    const ephemeralStake = await findEphemeralStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      stakePoolAddress,\n      new BN(ephemeralStakeSeed),\n    );\n    instructions.push(\n      StakePoolInstruction.decreaseAdditionalValidatorStake({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        validatorStake,\n        transientStake,\n        lamports,\n        ephemeralStake,\n        ephemeralStakeSeed,\n      }),\n    );\n  } else {\n    instructions.push(\n      StakePoolInstruction.decreaseValidatorStakeWithReserve({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        validatorStake,\n        transientStake,\n        lamports,\n      }),\n    );\n  }\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to completely update a stake pool after epoch change.\n */\nexport async function updateStakePool(\n  connection: Connection,\n  stakePool: StakePoolAccount,\n  programId: PublicKey,\n  noMerge = false,\n) {\n  const stakePoolAddress = stakePool.pubkey;\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(programId, stakePoolAddress);\n\n  const updateListInstructions: TransactionInstruction[] = [];\n  const instructions: TransactionInstruction[] = [];\n\n  let startIndex = 0;\n  const validatorChunks: Array<ValidatorStakeInfo[]> = arrayChunk(\n    validatorList.account.data.validators,\n    MAX_VALIDATORS_TO_UPDATE,\n  );\n\n  for (const validatorChunk of validatorChunks) {\n    const validatorAndTransientStakePairs: PublicKey[] = [];\n\n    for (const validator of validatorChunk) {\n      const validatorStake = await findStakeProgramAddress(\n        programId,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n      );\n      validatorAndTransientStakePairs.push(validatorStake);\n\n      const transientStake = await findTransientStakeProgramAddress(\n        programId,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      validatorAndTransientStakePairs.push(transientStake);\n    }\n\n    updateListInstructions.push(\n      StakePoolInstruction.updateValidatorListBalance({\n        stakePool: stakePoolAddress,\n        programId,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        validatorAndTransientStakePairs,\n        withdrawAuthority,\n        startIndex,\n        noMerge,\n      }),\n    );\n    startIndex += MAX_VALIDATORS_TO_UPDATE;\n  }\n\n  instructions.push(\n    StakePoolInstruction.updateStakePoolBalance({\n      stakePool: stakePoolAddress,\n      programId,\n      validatorList: stakePool.account.data.validatorList,\n      reserveStake: stakePool.account.data.reserveStake,\n      managerFeeAccount: stakePool.account.data.managerFeeAccount,\n      poolMint: stakePool.account.data.poolMint,\n      withdrawAuthority,\n    }),\n  );\n\n  instructions.push(\n    StakePoolInstruction.cleanupRemovedValidatorEntries({\n      stakePool: stakePoolAddress,\n      programId,\n      validatorList: stakePool.account.data.validatorList,\n    }),\n  );\n\n  return {\n    updateListInstructions,\n    finalInstructions: instructions,\n  };\n}\n\n/**\n * Retrieves detailed information about the StakePool.\n */\nexport async function stakePoolInfo(connection: Connection, stakePoolAddress: PublicKey) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const reserveAccountStakeAddress = stakePool.account.data.reserveStake;\n  const totalLamports = stakePool.account.data.totalLamports;\n  const lastUpdateEpoch = stakePool.account.data.lastUpdateEpoch;\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const maxNumberOfValidators = validatorList.account.data.maxValidators;\n  const currentNumberOfValidators = validatorList.account.data.validators.length;\n\n  const epochInfo = await connection.getEpochInfo();\n  const reserveStake = await connection.getAccountInfo(reserveAccountStakeAddress);\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const minimumReserveStakeBalance = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n\n  const stakeAccounts = await Promise.all(\n    validatorList.account.data.validators.map(async (validator) => {\n      const stakeAccountAddress = await findStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n      );\n      const transientStakeAccountAddress = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      const updateRequired = !validator.lastUpdateEpoch.eqn(epochInfo.epoch);\n      return {\n        voteAccountAddress: validator.voteAccountAddress.toBase58(),\n        stakeAccountAddress: stakeAccountAddress.toBase58(),\n        validatorActiveStakeLamports: validator.activeStakeLamports.toString(),\n        validatorLastUpdateEpoch: validator.lastUpdateEpoch.toString(),\n        validatorLamports: validator.activeStakeLamports\n          .add(validator.transientStakeLamports)\n          .toString(),\n        validatorTransientStakeAccountAddress: transientStakeAccountAddress.toBase58(),\n        validatorTransientStakeLamports: validator.transientStakeLamports.toString(),\n        updateRequired,\n      };\n    }),\n  );\n\n  const totalPoolTokens = lamportsToSol(stakePool.account.data.poolTokenSupply);\n  const updateRequired = !lastUpdateEpoch.eqn(epochInfo.epoch);\n\n  return {\n    address: stakePoolAddress.toBase58(),\n    poolWithdrawAuthority: withdrawAuthority.toBase58(),\n    manager: stakePool.account.data.manager.toBase58(),\n    staker: stakePool.account.data.staker.toBase58(),\n    stakeDepositAuthority: stakePool.account.data.stakeDepositAuthority.toBase58(),\n    stakeWithdrawBumpSeed: stakePool.account.data.stakeWithdrawBumpSeed,\n    maxValidators: maxNumberOfValidators,\n    validatorList: validatorList.account.data.validators.map((validator) => {\n      return {\n        activeStakeLamports: validator.activeStakeLamports.toString(),\n        transientStakeLamports: validator.transientStakeLamports.toString(),\n        lastUpdateEpoch: validator.lastUpdateEpoch.toString(),\n        transientSeedSuffixStart: validator.transientSeedSuffixStart.toString(),\n        transientSeedSuffixEnd: validator.transientSeedSuffixEnd.toString(),\n        status: validator.status.toString(),\n        voteAccountAddress: validator.voteAccountAddress.toString(),\n      };\n    }), // CliStakePoolValidator\n    validatorListStorageAccount: stakePool.account.data.validatorList.toBase58(),\n    reserveStake: stakePool.account.data.reserveStake.toBase58(),\n    poolMint: stakePool.account.data.poolMint.toBase58(),\n    managerFeeAccount: stakePool.account.data.managerFeeAccount.toBase58(),\n    tokenProgramId: stakePool.account.data.tokenProgramId.toBase58(),\n    totalLamports: stakePool.account.data.totalLamports.toString(),\n    poolTokenSupply: stakePool.account.data.poolTokenSupply.toString(),\n    lastUpdateEpoch: stakePool.account.data.lastUpdateEpoch.toString(),\n    lockup: stakePool.account.data.lockup, // pub lockup: CliStakePoolLockup\n    epochFee: stakePool.account.data.epochFee,\n    nextEpochFee: stakePool.account.data.nextEpochFee,\n    preferredDepositValidatorVoteAddress:\n      stakePool.account.data.preferredDepositValidatorVoteAddress,\n    preferredWithdrawValidatorVoteAddress:\n      stakePool.account.data.preferredWithdrawValidatorVoteAddress,\n    stakeDepositFee: stakePool.account.data.stakeDepositFee,\n    stakeWithdrawalFee: stakePool.account.data.stakeWithdrawalFee,\n    // CliStakePool the same\n    nextStakeWithdrawalFee: stakePool.account.data.nextStakeWithdrawalFee,\n    stakeReferralFee: stakePool.account.data.stakeReferralFee,\n    solDepositAuthority: stakePool.account.data.solDepositAuthority?.toBase58(),\n    solDepositFee: stakePool.account.data.solDepositFee,\n    solReferralFee: stakePool.account.data.solReferralFee,\n    solWithdrawAuthority: stakePool.account.data.solWithdrawAuthority?.toBase58(),\n    solWithdrawalFee: stakePool.account.data.solWithdrawalFee,\n    nextSolWithdrawalFee: stakePool.account.data.nextSolWithdrawalFee,\n    lastEpochPoolTokenSupply: stakePool.account.data.lastEpochPoolTokenSupply.toString(),\n    lastEpochTotalLamports: stakePool.account.data.lastEpochTotalLamports.toString(),\n    details: {\n      reserveStakeLamports: reserveStake?.lamports,\n      reserveAccountStakeAddress: reserveAccountStakeAddress.toBase58(),\n      minimumReserveStakeBalance,\n      stakeAccounts,\n      totalLamports,\n      totalPoolTokens,\n      currentNumberOfValidators,\n      maxNumberOfValidators,\n      updateRequired,\n    }, // CliStakePoolDetails\n  };\n}\n\n/**\n * Creates instructions required to create pool token metadata.\n */\nexport async function createPoolTokenMetadata(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  payer: PublicKey,\n  name: string,\n  symbol: string,\n  uri: string,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n  const tokenMetadata = findMetadataAddress(stakePool.account.data.poolMint);\n  const manager = stakePool.account.data.manager;\n\n  const instructions: TransactionInstruction[] = [];\n  instructions.push(\n    StakePoolInstruction.createTokenMetadata({\n      stakePool: stakePoolAddress,\n      poolMint: stakePool.account.data.poolMint,\n      payer,\n      manager,\n      tokenMetadata,\n      withdrawAuthority,\n      name,\n      symbol,\n      uri,\n    }),\n  );\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to update pool token metadata.\n */\nexport async function updatePoolTokenMetadata(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  name: string,\n  symbol: string,\n  uri: string,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const tokenMetadata = findMetadataAddress(stakePool.account.data.poolMint);\n\n  const instructions: TransactionInstruction[] = [];\n  instructions.push(\n    StakePoolInstruction.updateTokenMetadata({\n      stakePool: stakePoolAddress,\n      manager: stakePool.account.data.manager,\n      tokenMetadata,\n      withdrawAuthority,\n      name,\n      symbol,\n      uri,\n    }),\n  );\n\n  return {\n    instructions,\n  };\n}\n"],"names":["base64Js","byteLength","toByteArray","fromByteArray","lookup","revLookup","Arr","Uint8Array","Array","code","i","len","length","charCodeAt","getLens","b64","Error","validLen","indexOf","placeHoldersLen","lens","_byteLength","tmp","arr","curByte","tripletToBase64","num","encodeChunk","uint8","start","end","output","push","join","extraBytes","parts","maxChunkLength","len2","ieee754","read","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","d","s","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","base64","require$$0","require$$1","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","console","error","proto","foo","Object","setPrototypeOf","prototype","defineProperty","enumerable","get","isBuffer","this","undefined","byteOffset","createBuffer","RangeError","buf","arg","encodingOrOffset","TypeError","allocUnsafe","from","poolSize","fromString","ArrayBuffer","isView","fromArrayView","isInstance","fromArrayBuffer","SharedArrayBuffer","valueOf","b","fromObject","toPrimitive","assertSize","size","alloc","fill","encoding","checked","allocUnsafeSlow","string","isEncoding","actual","slice","fromArrayLike","array","arrayView","copy","obj","numberIsNaN","type","isArray","data","toString","_isBuffer","compare","a","x","y","min","String","toLowerCase","concat","list","pos","set","call","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","swap16","swap32","swap64","apply","toLocaleString","equals","inspect","str","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","j","includes","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","utf16leToBytes","isFinite","toJSON","_arr","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","fromCharCode","ret","out","hexSliceLookupTable","bytes","newBuf","subarray","checkOffset","ext","readUintLE","readUIntLE","noAssert","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","lo","hi","BigInt","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","checkInt","writeUintLE","writeUIntLE","maxBytes","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","checkIEEE754","writeFloat","littleEndian","writeFloatLE","writeFloatBE","writeDouble","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","NodeError","constructor","super","writable","configurable","name","stack","message","range","input","msg","received","isInteger","addNumericalSeparator","checkBounds","ERR_OUT_OF_RANGE","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","INVALID_BASE64_RE","base64clean","split","units","leadSurrogate","byteArray","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","anumber","isSafeInteger","isBytes","abytes","lengths","ahash","h","create","outputLen","blockLen","aexists","instance","checkFinished","destroyed","finished","aoutput","crypto","globalThis","createView","DataView","rotr","word","shift","TextEncoder","encode","toBytes","concatBytes","arrays","sum","pad","Hash","clone","_cloneInto","wrapConstructor","hashCons","hashC","update","digest","randomBytes","bytesLength","getRandomValues","setBigUint64","view","_32n","_u32_max","wh","wl","l","setUint32","Chi","Maj","HashMD","padOffset","take","dataView","process","roundClean","digestInto","oview","outLen","state","destroy","to","U32_MASK64","fromBig","le","lst","Ah","Uint32Array","Al","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","SHA512_Kh","SHA512_Kl","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","_0n","_1n","_2n","item","abool","title","hexes","_","padStart","bytesToHex","hex","numberToHexUnpadded","hexToNumber","asciis","_0","_9","A","F","f","asciiToBase16","ch","hexToBytes","hl","al","ai","n1","n2","char","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","numberToVarBytesBE","ensureBytes","expectedLength","equalBytes","diff","isPosBig","inRange","aInRange","bitLen","bitGet","bitSet","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","gen","sl","genUntil","pred","validatorFns","bigint","function","boolean","stringOrUint8Array","field","object","Fp","isValid","hash","validateObject","validators","optValidators","checkField","fieldName","isOptional","checkVal","entries","notImplemented","memoized","WeakMap","args","computed","_3n","_4n","_5n","_8n","mod","result","power","modulo","pow2","invert","number","u","q","r","gcd","tonelliShanks","P","legendreC","Q","S","Z","p1div4","tonelliFast","root","eql","sqr","Q1div2","tonelliSlow","neg","ONE","g","ZERO","t2","ge","FpSqrt","sqrt3mod4","c1","sqrt5mod8","nv","isNegativeLE","FIELD_FIELDS","validateField","initial","ORDER","MASK","BYTES","BITS","opts","reduce","FpPow","p","FpInvertBatch","nums","lastMultiplied","acc","is0","inverted","inv","reduceRight","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","redef","sqrtP","freeze","isOdd","lhs","rhs","div","sqrN","addN","subN","mulN","sqrt","invertBatch","cmov","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","key","fieldLen","minLen","reduced","constTimeNegate","condition","negate","validateW","W","bits","calcWOpts","windows","windowSize","validateMSMPoints","points","forEach","validateMSMScalars","scalars","pointPrecomputes","pointWindowSizes","getW","wNAF","hasPrecomputes","elm","unsafeLadder","double","precomputeWindow","base","window","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","cond1","cond2","wNAFUnsafe","curr","getPrecomputes","transform","comp","wNAFCached","wNAFCachedUnsafe","prev","setWindowSize","delete","pippenger","fieldN","zero","buckets","lastBits","scalar","resI","sumI","validateBasic","curve","Gx","Gy","VERIFY_DEFAULT","zip215","validateOpts","ut.validateObject","adjustScalarBytes","domain","uvRatio","mapToCurve","twistedEdwards","curveDef","CURVE","CURVE_ORDER","prehash","cHash","cofactor","modP","Fn","ctx","phflag","aCoordinate","ut.aInRange","assertPoint","other","Point","toAffineMemo","iz","ex","ey","ez","z","ax","ay","zz","assertValidMemo","X","Y","et","T","X2","Y2","Z2","Z4","aX2","left","right","XY","ZT","toAffine","fromAffine","normalizeZ","toInv","msm","_setWindowSize","wnaf","assertValidity","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","B","C","D","x1y1","G","H","X3","Y3","T3","Z3","T1","T2","subtract","multiply","multiplyUnsafe","I","isSmallOrder","isTorsionFree","clearCofactor","fromHex","normed","lastByte","ut.bytesToNumberLE","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","ut.numberToBytesLE","toHex","ut.bytesToHex","modN","modN_LE","hashed","head","prefix","pointBytes","getPublicKey","hashDomainToScalar","context","msgs","ut.concatBytes","sign","options","R","verifyOpts","verify","sig","publicKey","SB","RkA","utils","randomPrivateKey","precompute","ExtendedPoint","ED25519_P","ED25519_SQRT_M1","ed25519_pow_2_252_3","_10n","_20n","_40n","_80n","x2","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","module","assert","inherits","ctor","superCtor","super_","TempCtor","BN","endian","isBN","negative","words","red","_init","wordSize","cmp","init","_initNumber","_initArray","_parseHex","_parseBase","toArray","w","off","_strip","parseHex4Bits","index","parseHexByte","lowerBound","parseLength","parseBase","limbLen","limbPow","total","imuln","_iaddn","dest","move","_move","_expand","strip","_normSign","for","zeros","groupSizes","groupBases","padding","carry","groupSize","groupBase","isZero","modrn","idivn","toNumber","toBuffer","toArrayLike","allocate","ArrayType","reqLength","postfix","_toArrayLikeLE","position","_toArrayLikeBE","clz32","_countBits","t","_zeroBits","toBitArray","bit","wbit","zeroBits","toTwos","width","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","iadd","isub","smallMulTo","self","ncarry","rword","maxJ","comb10MulTo","o","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","bl2","bh2","b3","bl3","bh3","bl4","bh4","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","imul","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","mulTo","mulf","isNegNum","muln","isqr","iushln","carryMask","newCarry","ishln","iushrn","hint","extended","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","_wordDiv","mode","bhi","bhiBits","qj","divmod","positive","divn","umod","divRound","dm","half","r2","andln","modn","egcd","isEven","yp","xp","im","jm","_invmp","x1","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lt","lten","lte","eqn","eq","Red","toRed","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","_tmp","ireduce","rlen","imulK","K256","next","P224","P192","P25519","_prime","prime","imod","mod3","one","nOne","lpow","wnd","current","currentLen","mont","Mont","rinv","minv","copyProps","SafeBuffer","_Buffer","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","source","zeroes","pbegin","pend","b58","it1","it2","repeat","decodeUnsafe","psz","b256","it3","it4","vch","decode","basex","bs58","SHA256_K","SHA256_IV","SHA256_W","SHA256","W15","W2","s0","s1","sigma1","sigma0","sha256","ToDictionary","stringToCodePoints","codePointsToString","code_points","cp","end_of_stream","Stream","tokens","endOfStream","prepend","token","unshift","pop","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","TextDecoder","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","UTF8Decoder","input_stream","handler","_encoder","_options","opt_string","UTF8Encoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","count","temp","encoding_lib","__createBinding","k2","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","hasOwnProperty","__importDefault","default","lib","deserializeUnchecked","deserialize","serialize","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","ResolvedTextDecoder","textDecoder","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","splice","maybeResize","writeU8","writeU16","writeU32","writeU64","writeBuffer","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","BinaryReader","readU8","readU16","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","schema","fieldType","writer","kind","serializeStruct","borshSerialize","structSchema","fields","idx","values","Writer","deserializeField","reader","option","Map","deserializeStruct","classType","borshDeserialize","fieldValue","Reader","Layout_1","s16","nu64be","u48be","u40be","u32be","u16be","nu64","u40","u32","u24","u16","greedy","Constant","UTF8","Blob","BitStructure","VariantLayout","Union","UnionLayoutDiscriminator","Structure","Sequence","DoubleBE","Double","Float","NearInt64BE","NearUInt64BE","NearUInt64","IntBE","Int","UInt","OffsetLayout","GreedyCount","ExternalLayout","nameWithProperty","Layout","checkUint8Array","constant","cstr","blob","unionLayoutDiscriminator","union","struct","f64","f32be","f32","ns64be","s40be","s32be","s24be","s16be","s48","s40","s24","buffer_1","uint8ArrayToBuffer","span","property","makeDestinationObject","getSpan","replicate","rv","assign","fromArray","bindConstructorLayout","Class","layout","layout_","boundConstructor_","isCount","elementSpan","rem","UIntBE","V2E32","divmodInt64","hi32","lo32","roundedInt64","NearInt64","FloatBE","elementLayout","elo","decodePrefixes","fd","fsp","firstOffset","lastOffset","lastWrote","fv","layoutFor","offsetOf","UnionDiscriminator","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","vb","fixBitwiseResult","msb","_packedSetValue","_packedGetValue","addField","bf","BitField","addBoolean","fieldFor","container","totalBits","usedBits","valueMask","wordMask","wordValue","srcBuffer","CString","srcb","maxSpan","u8","u48","u24be","s8","s32","ns64","s48be","f64be","seq","utf8","browser","toBigIntLE","reversed","toBigIntBE","toBufferLE","toBufferBE","StructError","failure","failures","cached","explanation","rest","path","cause","isIterable","isObject","iterator","isNonArrayObject","print","JSON","stringify","shiftIterator","done","toFailure","branch","refinement","toFailures","run","coerce","coercer","status","validator","ts","Set","refiner","Struct$1","Struct","props","is","validate","tuples","tuple","define","any","Element","enums","description","literal","never","nullable","optional","record","Key","Value","Structs","Never","keys","coerced","unknown","HMAC","_key","iHash","oHash","getPrototypeOf","hmac","validateSigVerOpts","lowS","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","b2n","h2b","ut","DERErr","DER","Err","_tlv","dataLen","ut.numberToHexUnpadded","lenLen","isLong","lengthBytes","_int","toSig","int","tlv","ut.abytes","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","rs","ss","weierstrassPoints","_c","_isCompressed","tail","weierstrassEquation","x3","isWithinCurveOrder","ut.inRange","normPrivateKeyToScalar","N","ut.isBytes","ut.bytesToNumberBE","assertPrjPoint","px","py","pz","privateKey","hasEvenY","U1","U2","t0","t1","t3","t4","t5","sc","k1neg","k1","k2neg","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","isCompressed","_bits","ProjectivePoint","bits2int","bits2int_modN","weierstrass","compressedLen","uncompressedLen","invN","cat","sqrtError","suffix","isYOdd","isHeadOdd","cl","ul","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","u1","u2","hasHighS","toDERRawBytes","ut.hexToBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","isProbPub","getSharedSecret","privateA","publicB","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","drbg","ut.createHmacDrbg","signature","sg","format","isHex","isObj","_sig","derError","getHash","createCurve","defHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b11","b22","b44","b88","b176","b220","b223","Fpk1","secp256k1","POW_2_128","c2","generateKeypair","privateScalar","secretKey","isOnCurve","properties","SOLANA_SCHEMA","decodeUnchecked","_PublicKey","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","_bn","uniquePublicKeyCounter","PublicKey","decoded","unique","toBase58","zeroPad","toStringTag","createWithSeed","fromPublicKey","programId","publicKeyBytes","createProgramAddressSync","seeds","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","BufferLayout.blob","rustString","rsl","BufferLayout.struct","BufferLayout.u32","BufferLayout.offset","_decode","_encode","rslShim","chars","authorized","lockup","BufferLayout.ns64","voteInit","BufferLayout.u8","voteAuthorizeWithSeedArgs","getAlloc","getItemAlloc","decodeLength","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","guardedSplice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","nonProgramIds","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","BufferLayout.seq","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","signedKeys","unsignedKeys","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","signatureErrors","_getMessageSignednessErrors","missing","invalid","config","sigErrors","errorMessage","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","encodeData","allocLength","layoutFields","FeeCalculatorLayout","BufferLayout.nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","encodeDecode","bigInt","bigIntLayout","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","params","lamports","space","fromPubkey","newAccountPubkey","transfer","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","authorizedPubkey","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","slot","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","taper","terminal","epoch","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","ParsedInstructionStruct","program","PartiallyDecodedInstructionStruct","logs","executable","owner","rentEpoch","unitsConsumed","returnData","innerInstructions","byIdentity","firstSlot","lastSlot","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","active","inactive","memo","blockTime","subscription","ProgramAccountInfoResult","SlotInfoResult","parent","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","previousBlockhash","parentSlot","transactions","rewards","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","feeCalculator","lamportsPerSignature","LogsResult","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","LayoutExports$1","BufferLayout.u16","_Lockup","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","rentExemptReserve","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","InitializeAccount","UpdateValidatorIdentity","website","details","iconUrl","keybaseUsername","LAMPORTS_PER_SOL","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","bool","boolLayout","publicKeyLayout","TokenError","TokenAccountNotFoundError","TokenInvalidAccountError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenOwnerOffCurveError","TokenInstruction","AccountType","ACCOUNT_TYPE_SIZE","MultisigLayout","MULTISIG_SIZE","AccountState","AccountLayout","ACCOUNT_SIZE","async","getAccount","commitment","info","getAccountInfo","unpackAccount","rawAccount","tlvData","Account","delegateOption","delegatedAmount","isInitialized","Uninitialized","isFrozen","Frozen","isNative","isNativeOption","closeAuthority","closeAuthorityOption","addSigners","ownerOrAuthority","multiSigners","MintLayout","getAssociatedTokenAddressSync","allowOwnerOffCurve","associatedTokenProgramId","approveInstructionData","createApproveInstruction","Approve","createAssociatedTokenAccountIdempotentInstruction","associatedToken","buildAssociatedTokenAccountInstruction","solToLamports","lamportsToSol","signMultiplier","absLamports","lamportsString","splitIndex","solString","parseFloat","METADATA_PROGRAM_ID","METADATA_MAX_NAME_LENGTH","METADATA_MAX_SYMBOL_LENGTH","METADATA_MAX_URI_LENGTH","STAKE_POOL_PROGRAM_ID","MAX_VALIDATORS_TO_UPDATE","EPHEMERAL_STAKE_SEED_PREFIX","TRANSIENT_STAKE_SEED_PREFIX","MINIMUM_ACTIVE_STAKE","findWithdrawAuthorityProgramAddress","stakePoolAddress","findStakeProgramAddress","voteAccountAddress","findTransientStakeProgramAddress","findEphemeralStakeProgramAddress","findMetadataAddress","stakePoolMintAddress","Layout$1","upv","const","BNLayout","LayoutCls","signed","WrappedLayout","decoder","encoder","OptionLayout","vec","feeFields","BigNumFromString","FutureEpochLayout","futureEpoch","StakeAccountType","StakeMeta","StakeAccountInfo","stake","delegation","voter","activationEpoch","deactivationEpoch","warmupCooldownRate","creditsObserved","StakeAccount","StakePoolLayout","ValidatorStakeInfoStatus","ValidatorStakeInfoLayout","ValidatorListLayout","getValidatorListAccount","prepareWithdrawAccounts","stakePool","compareFn","skipFee","validatorListAcc","validatorList","minBalanceForRentExemption","getMinimumBalanceForRentExemption","minBalance","Active","stakeAccountAddress","activeStakeLamports","isPreferred","_a","preferredWithdrawValidatorVoteAddress","voteAddress","stakeAddress","transientStakeLamports","transientStakeAccountAddress","transientSeedSuffixStart","reserveStake","reserveStakeBalance","_b","withdrawFrom","remainingAmount","stakeWithdrawalFee","inverseFee","numerator","denominator","filteredAccounts","availableForWithdrawal","calcPoolTokensForDeposit","poolAmount","stakeLamports","poolTokenSupply","totalLamports","calcLamportsWithdrawAmount","poolTokens","newStakeAccount","stakeReceiverKeypair","decodeData","arrayChunk","MOVE_STAKE_LAYOUT","UPDATE_VALIDATOR_LIST_BALANCE_LAYOUT","tokenMetadataLayout","nameLength","symbolLength","uriLength","STAKE_POOL_INSTRUCTION_LAYOUTS","AddValidatorToPool","RemoveValidatorFromPool","DecreaseValidatorStake","IncreaseValidatorStake","UpdateValidatorListBalance","UpdateStakePoolBalance","CleanupRemovedValidatorEntries","DepositStake","WithdrawStake","DepositSol","WithdrawSol","IncreaseAdditionalValidatorStake","DecreaseAdditionalValidatorStake","DecreaseValidatorStakeWithReserve","Redelegate","StakePoolInstruction","addValidatorToPool","withdrawAuthority","validatorStake","validatorVote","removeValidatorFromPool","transientStake","updateValidatorListBalance","startIndex","noMerge","validatorAndTransientStakePairs","updateStakePoolBalance","managerFeeAccount","poolMint","cleanupRemovedValidatorEntries","increaseValidatorStake","transientStakeSeed","increaseAdditionalValidatorStake","ephemeralStake","ephemeralStakeSeed","decreaseValidatorStake","decreaseValidatorStakeWithReserve","decreaseAdditionalValidatorStake","depositStake","depositAuthority","destinationPoolAccount","referralPoolAccount","depositSol","fundingAccount","withdrawStake","destinationStake","destinationStakeAuthority","sourceTransferAuthority","sourcePoolAccount","withdrawSol","destinationSystemAccount","solWithdrawAuthority","createTokenMetadata","tokenMetadata","manager","symbol","uri","nameLen","symbolLen","uriLen","updateTokenMetadata","decodeDepositStake","checkProgramId","checkKeyLength","decodeDepositSol","getStakePoolAccount","getStakeAccount","stakeAccount","getParsedAccountInfo","getStakePoolAccounts","stakePoolProgramAddress","response","getProgramAccounts","poolTokenReceiverAccount","associatedAddress","stakeDepositAuthority","destinationTokenAccount","referrerTokenAccount","fromBalance","getBalance","stakePoolAccount","userSolTransfer","tokenOwner","useReserve","stakeReceiver","poolTokenAccount","validatorComparator","tokenAccount","stakeAccountRentExemption","stakeReceiverAccount","withdrawAccounts","voteAccount","_d","validatorListAccount","isValidVoter","find","availableLamports","userTransferAuthority","totalRentFreeBalances","maxWithdrawAccounts","withdrawAccount","solWithdrawAmount","infoMsg","_e","_f","stakeToReceive","stakeKeypair","newStakeKeypair","solReceiver","poolWithdrawAuthority","expectedSolWithdrawAuthority","withdrawTransaction","validatorInfo","updateStakePool","updateListInstructions","validatorChunks","validatorChunk","finalInstructions","stakePoolInfo","reserveAccountStakeAddress","lastUpdateEpoch","maxNumberOfValidators","maxValidators","currentNumberOfValidators","epochInfo","getEpochInfo","minimumReserveStakeBalance","stakeAccounts","Promise","all","updateRequired","validatorActiveStakeLamports","validatorLastUpdateEpoch","validatorLamports","validatorTransientStakeAccountAddress","validatorTransientStakeLamports","totalPoolTokens","stakeWithdrawBumpSeed","transientSeedSuffixEnd","validatorListStorageAccount","tokenProgramId","epochFee","nextEpochFee","preferredDepositValidatorVoteAddress","stakeDepositFee","nextStakeWithdrawalFee","stakeReferralFee","solDepositAuthority","solDepositFee","solReferralFee","solWithdrawalFee","nextSolWithdrawalFee","lastEpochPoolTokenSupply","lastEpochTotalLamports","reserveStakeLamports","createPoolTokenMetadata","updatePoolTokenMetadata"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,46]}